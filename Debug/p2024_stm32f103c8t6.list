
p2024_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004998  08004998  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004998  08004998  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004998  08004998  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00005998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800499c  0800499c  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080049a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000068  08004a08  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004a08  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b112  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260a  00000000  00000000  000111a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  000137b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018efe  00000000  00000000  0001493a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e167  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086de1  00000000  00000000  0003b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  000c27c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ba  00000000  00000000  000c558c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080046bc 	.word	0x080046bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080046bc 	.word	0x080046bc

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b18      	ldr	r3, [pc, #96]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000152:	4a19      	ldr	r2, [pc, #100]	@ (80001b8 <MX_CAN_Init+0x6c>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000156:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000158:	2220      	movs	r2, #32
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800015c:	4b15      	ldr	r3, [pc, #84]	@ (80001b4 <MX_CAN_Init+0x68>)
 800015e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000162:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000164:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000166:	2200      	movs	r2, #0
 8000168:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800016a:	4b12      	ldr	r3, [pc, #72]	@ (80001b4 <MX_CAN_Init+0x68>)
 800016c:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000170:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000172:	4b10      	ldr	r3, [pc, #64]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000174:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000178:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017a:	4b0e      	ldr	r3, [pc, #56]	@ (80001b4 <MX_CAN_Init+0x68>)
 800017c:	2200      	movs	r2, #0
 800017e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000180:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000182:	2200      	movs	r2, #0
 8000184:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000186:	4b0b      	ldr	r3, [pc, #44]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000188:	2200      	movs	r2, #0
 800018a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018c:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x68>)
 800018e:	2200      	movs	r2, #0
 8000190:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000192:	4b08      	ldr	r3, [pc, #32]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000194:	2200      	movs	r2, #0
 8000196:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x68>)
 800019a:	2200      	movs	r2, #0
 800019c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019e:	4805      	ldr	r0, [pc, #20]	@ (80001b4 <MX_CAN_Init+0x68>)
 80001a0:	f000 fb84 	bl	80008ac <HAL_CAN_Init>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001aa:	f000 f958 	bl	800045e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000084 	.word	0x20000084
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b08a      	sub	sp, #40	@ 0x28
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a29      	ldr	r2, [pc, #164]	@ (800027c <HAL_CAN_MspInit+0xc0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d14b      	bne.n	8000274 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b28      	ldr	r3, [pc, #160]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a27      	ldr	r2, [pc, #156]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b25      	ldr	r3, [pc, #148]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	613b      	str	r3, [r7, #16]
 80001f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b22      	ldr	r3, [pc, #136]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a21      	ldr	r2, [pc, #132]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <HAL_CAN_MspInit+0xc4>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800020c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	4818      	ldr	r0, [pc, #96]	@ (8000284 <HAL_CAN_MspInit+0xc8>)
 8000222:	f001 fb3b 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4619      	mov	r1, r3
 800023a:	4812      	ldr	r0, [pc, #72]	@ (8000284 <HAL_CAN_MspInit+0xc8>)
 800023c:	f001 fb2e 	bl	800189c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000240:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <HAL_CAN_MspInit+0xcc>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	627b      	str	r3, [r7, #36]	@ 0x24
 8000246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000248:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800024c:	627b      	str	r3, [r7, #36]	@ 0x24
 800024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000250:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000254:	627b      	str	r3, [r7, #36]	@ 0x24
 8000256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800025c:	627b      	str	r3, [r7, #36]	@ 0x24
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <HAL_CAN_MspInit+0xcc>)
 8000260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000262:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2100      	movs	r1, #0
 8000268:	2014      	movs	r0, #20
 800026a:	f001 fa2e 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800026e:	2014      	movs	r0, #20
 8000270:	f001 fa47 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000274:	bf00      	nop
 8000276:	3728      	adds	r7, #40	@ 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40006400 	.word	0x40006400
 8000280:	40021000 	.word	0x40021000
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40010000 	.word	0x40010000

0800028c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0308 	and.w	r3, r3, #8
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_GPIO_Init+0x78>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002d6:	480c      	ldr	r0, [pc, #48]	@ (8000308 <MX_GPIO_Init+0x7c>)
 80002d8:	f001 fc64 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	2302      	movs	r3, #2
 80002ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	4619      	mov	r1, r3
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <MX_GPIO_Init+0x7c>)
 80002f6:	f001 fad1 	bl	800189c <HAL_GPIO_Init>

}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40010c00 	.word	0x40010c00

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t prev_systick=0;
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa67 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f85f 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f7ff ffb5 	bl	800028c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000322:	f000 f9bd 	bl	80006a0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000326:	f7ff ff11 	bl	800014c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  // printf
  setvbuf(stdout, NULL, _IONBF, 0);
 800032a:	4b22      	ldr	r3, [pc, #136]	@ (80003b4 <main+0xa8>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	6898      	ldr	r0, [r3, #8]
 8000330:	2300      	movs	r3, #0
 8000332:	2202      	movs	r2, #2
 8000334:	2100      	movs	r1, #0
 8000336:	f003 fa9f 	bl	8003878 <setvbuf>
  printf("\r\nprintf use IONBF ..");
 800033a:	481f      	ldr	r0, [pc, #124]	@ (80003b8 <main+0xac>)
 800033c:	f003 fa2c 	bl	8003798 <iprintf>

#if defined CAN_ENABLE
  // CAN Start
  // config for Can Tx
  can_tx_packet_header_config();
 8000340:	f003 f882 	bl	8003448 <can_tx_packet_header_config>
  // can filter init for can rx
  can_rx_packet_filter_config();
 8000344:	f003 f89c 	bl	8003480 <can_rx_packet_filter_config>
  HAL_CAN_ConfigFilter(&hcanHandle, &CanRxFilterConfig);
 8000348:	491c      	ldr	r1, [pc, #112]	@ (80003bc <main+0xb0>)
 800034a:	481d      	ldr	r0, [pc, #116]	@ (80003c0 <main+0xb4>)
 800034c:	f000 fba9 	bl	8000aa2 <HAL_CAN_ConfigFilter>
  printf("\r\nhal_can_filter config ..");
 8000350:	481c      	ldr	r0, [pc, #112]	@ (80003c4 <main+0xb8>)
 8000352:	f003 fa21 	bl	8003798 <iprintf>

  if (HAL_CAN_Start(&hcanHandle) != HAL_OK)
 8000356:	481a      	ldr	r0, [pc, #104]	@ (80003c0 <main+0xb4>)
 8000358:	f000 fc6c 	bl	8000c34 <HAL_CAN_Start>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d002      	beq.n	8000368 <main+0x5c>
  {
    /* Start Error */
  	printf("\r\nhal_can_start error !!");
 8000362:	4819      	ldr	r0, [pc, #100]	@ (80003c8 <main+0xbc>)
 8000364:	f003 fa18 	bl	8003798 <iprintf>
    //Error_Handler();
  }
  printf("\r\nhal_can_started..");
 8000368:	4818      	ldr	r0, [pc, #96]	@ (80003cc <main+0xc0>)
 800036a:	f003 fa15 	bl	8003798 <iprintf>

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800036e:	2102      	movs	r1, #2
 8000370:	4813      	ldr	r0, [pc, #76]	@ (80003c0 <main+0xb4>)
 8000372:	f000 fe93 	bl	800109c <HAL_CAN_ActivateNotification>
    /* Notification Error */
   //  Error_Handler();
  }

  //
  can_operation_mode_display();
 8000376:	f002 fff9 	bl	800336c <can_operation_mode_display>
#endif//CAN_ENABLE

  //
  printf("\r\nreset...");
 800037a:	4815      	ldr	r0, [pc, #84]	@ (80003d0 <main+0xc4>)
 800037c:	f003 fa0c 	bl	8003798 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// 1. systick
  	static int print_cnt = 0;
  	if (get_systick() >= (prev_systick+500))
 8000380:	f003 f8cc 	bl	800351c <get_systick>
 8000384:	4602      	mov	r2, r0
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800038c:	429a      	cmp	r2, r3
 800038e:	d30d      	bcc.n	80003ac <main+0xa0>
  	{
  		printf("\r\nHello : 2024-09.21-1 : %d", ++print_cnt);
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <main+0xc8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a0f      	ldr	r2, [pc, #60]	@ (80003d4 <main+0xc8>)
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <main+0xc8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4619      	mov	r1, r3
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <main+0xcc>)
 80003a2:	f003 f9f9 	bl	8003798 <iprintf>
  		prev_systick = get_systick();
 80003a6:	f003 f8b9 	bl	800351c <get_systick>
 80003aa:	6078      	str	r0, [r7, #4]
  	}
#if defined	CAN_ENABLE
  	// 2. CAN Tranceiver
#if defined	CAN_TRX_DEMO_MODE
  	can_txrx_process_demo();
 80003ac:	f002 fea6 	bl	80030fc <can_txrx_process_demo>
  {
 80003b0:	e7e6      	b.n	8000380 <main+0x74>
 80003b2:	bf00      	nop
 80003b4:	20000018 	.word	0x20000018
 80003b8:	080046d4 	.word	0x080046d4
 80003bc:	20000150 	.word	0x20000150
 80003c0:	20000084 	.word	0x20000084
 80003c4:	080046ec 	.word	0x080046ec
 80003c8:	08004708 	.word	0x08004708
 80003cc:	08004724 	.word	0x08004724
 80003d0:	08004738 	.word	0x08004738
 80003d4:	200000ac 	.word	0x200000ac
 80003d8:	08004744 	.word	0x08004744

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	@ 0x40
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	2228      	movs	r2, #40	@ 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fbd0 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fe:	2302      	movs	r3, #2
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000402:	2301      	movs	r3, #1
 8000404:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000406:	2310      	movs	r3, #16
 8000408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800040e:	2300      	movs	r3, #0
 8000410:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000412:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fbf3 	bl	8001c08 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000428:	f000 f819 	bl	800045e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2302      	movs	r3, #2
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800043c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2102      	movs	r1, #2
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fe60 	bl	800210c <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000452:	f000 f804 	bl	800045e <Error_Handler>
  }
}
 8000456:	bf00      	nop
 8000458:	3740      	adds	r7, #64	@ 0x40
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000462:	b672      	cpsid	i
}
 8000464:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000466:	bf00      	nop
 8000468:	e7fd      	b.n	8000466 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	@ (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <NMI_Handler+0x4>

080004d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <MemManage_Handler+0x4>

080004e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	inc_systick();
 8000520:	f002 ffee 	bl	8003500 <inc_systick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f9a6 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000532:	f000 fdd8 	bl	80010e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000084 	.word	0x20000084

08000540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <USART1_IRQHandler+0x10>)
 8000546:	f002 f86f 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000b4 	.word	0x200000b4

08000554 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e00a      	b.n	800057c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000566:	f3af 8000 	nop.w
 800056a:	4601      	mov	r1, r0
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60ba      	str	r2, [r7, #8]
 8000572:	b2ca      	uxtb	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf0      	blt.n	8000566 <_read+0x12>
  }

  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e009      	b.n	80005b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f801 	bl	80035b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	3301      	adds	r3, #1
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dbf1      	blt.n	80005a0 <_write+0x12>
  }
  return len;
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <_close>:

int _close(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ec:	605a      	str	r2, [r3, #4]
  return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_isatty>:

int _isatty(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060e:	b480      	push	{r7}
 8000610:	b085      	sub	sp, #20
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f003 fae8 	bl	8003c2c <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	@ (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	@ (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20005000 	.word	0x20005000
 8000688:	00000400 	.word	0x00000400
 800068c:	200000b0 	.word	0x200000b0
 8000690:	200002e0 	.word	0x200002e0

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f001 fea6 	bl	8002428 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f7ff febc 	bl	800045e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000b4 	.word	0x200000b4
 80006f0:	40013800 	.word	0x40013800

080006f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a20      	ldr	r2, [pc, #128]	@ (8000790 <HAL_UART_MspInit+0x9c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d139      	bne.n	8000788 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <HAL_UART_MspInit+0xa0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <HAL_UART_MspInit+0xa4>)
 800075a:	f001 f89f 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800075e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4809      	ldr	r0, [pc, #36]	@ (8000798 <HAL_UART_MspInit+0xa4>)
 8000774:	f001 f892 	bl	800189c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2025      	movs	r0, #37	@ 0x25
 800077e:	f000 ffa4 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000782:	2025      	movs	r0, #37	@ 0x25
 8000784:	f000 ffbd 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff ff7a 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a2:	490c      	ldr	r1, [pc, #48]	@ (80007d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a09      	ldr	r2, [pc, #36]	@ (80007dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b8:	4c09      	ldr	r4, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f003 fa37 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd9f 	bl	800030c <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007d8:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 80007dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007e0:	200002e0 	.word	0x200002e0

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 ff5b 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fe32 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 ff73 	bl	800171e <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 ff3b 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000004 	.word	0x20000004

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	@ (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000008 	.word	0x20000008
 8000894:	200000fc 	.word	0x200000fc

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	@ (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	200000fc 	.word	0x200000fc

080008ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e0ed      	b.n	8000a9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fc76 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 0201 	orr.w	r2, r2, #1
 80008de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e0:	f7ff ffda 	bl	8000898 <HAL_GetTick>
 80008e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008e6:	e012      	b.n	800090e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e8:	f7ff ffd6 	bl	8000898 <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d90b      	bls.n	800090e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2205      	movs	r2, #5
 8000906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e0c5      	b.n	8000a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0e5      	beq.n	80008e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f022 0202 	bic.w	r2, r2, #2
 800092a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800092c:	f7ff ffb4 	bl	8000898 <HAL_GetTick>
 8000930:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000932:	e012      	b.n	800095a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000934:	f7ff ffb0 	bl	8000898 <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	2b0a      	cmp	r3, #10
 8000940:	d90b      	bls.n	800095a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2205      	movs	r2, #5
 8000952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e09f      	b.n	8000a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1e5      	bne.n	8000934 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7e1b      	ldrb	r3, [r3, #24]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d108      	bne.n	8000982 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	e007      	b.n	8000992 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7e5b      	ldrb	r3, [r3, #25]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	e007      	b.n	80009bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7e9b      	ldrb	r3, [r3, #26]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d108      	bne.n	80009d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0220 	orr.w	r2, r2, #32
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e007      	b.n	80009e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0220 	bic.w	r2, r2, #32
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7edb      	ldrb	r3, [r3, #27]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d108      	bne.n	8000a00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0210 	bic.w	r2, r2, #16
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e007      	b.n	8000a10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0210 	orr.w	r2, r2, #16
 8000a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7f1b      	ldrb	r3, [r3, #28]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d108      	bne.n	8000a2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0208 	orr.w	r2, r2, #8
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0208 	bic.w	r2, r2, #8
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7f5b      	ldrb	r3, [r3, #29]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d108      	bne.n	8000a54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f042 0204 	orr.w	r2, r2, #4
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	e007      	b.n	8000a64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f022 0204 	bic.w	r2, r2, #4
 8000a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	ea42 0103 	orr.w	r1, r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b087      	sub	sp, #28
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000aba:	7cfb      	ldrb	r3, [r7, #19]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d003      	beq.n	8000ac8 <HAL_CAN_ConfigFilter+0x26>
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	f040 80aa 	bne.w	8000c1c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 031f 	and.w	r3, r3, #31
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d123      	bne.n	8000b4a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3248      	adds	r2, #72	@ 0x48
 8000b2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b40:	6979      	ldr	r1, [r7, #20]
 8000b42:	3348      	adds	r3, #72	@ 0x48
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	440b      	add	r3, r1
 8000b48:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d122      	bne.n	8000b98 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3248      	adds	r2, #72	@ 0x48
 8000b78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b8e:	6979      	ldr	r1, [r7, #20]
 8000b90:	3348      	adds	r3, #72	@ 0x48
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bb2:	e007      	b.n	8000bc4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000bde:	e007      	b.n	8000bf0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d107      	bne.n	8000c08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c0e:	f023 0201 	bic.w	r2, r3, #1
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e006      	b.n	8000c2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
  }
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d12e      	bne.n	8000ca6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0201 	bic.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c60:	f7ff fe1a 	bl	8000898 <HAL_GetTick>
 8000c64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c66:	e012      	b.n	8000c8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c68:	f7ff fe16 	bl	8000898 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b0a      	cmp	r3, #10
 8000c74:	d90b      	bls.n	8000c8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2205      	movs	r2, #5
 8000c86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e012      	b.n	8000cb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e5      	bne.n	8000c68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e006      	b.n	8000cb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000caa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
  }
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d003      	beq.n	8000ce8 <HAL_CAN_AddTxMessage+0x2c>
 8000ce0:	7ffb      	ldrb	r3, [r7, #31]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	f040 80ad 	bne.w	8000e42 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10a      	bne.n	8000d08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8095 	beq.w	8000e32 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10d      	bne.n	8000d40 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d2e:	68f9      	ldr	r1, [r7, #12]
 8000d30:	6809      	ldr	r1, [r1, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	440b      	add	r3, r1
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e00f      	b.n	8000d60 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d4a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d54:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3318      	adds	r3, #24
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	440b      	add	r3, r1
 8000d5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	440b      	add	r3, r1
 8000d70:	3304      	adds	r3, #4
 8000d72:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	7d1b      	ldrb	r3, [r3, #20]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d111      	bne.n	8000da0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3318      	adds	r3, #24
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	3304      	adds	r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	6811      	ldr	r1, [r2, #0]
 8000d90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3318      	adds	r3, #24
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3307      	adds	r3, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	061a      	lsls	r2, r3, #24
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3306      	adds	r3, #6
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	041b      	lsls	r3, r3, #16
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3305      	adds	r3, #5
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	3204      	adds	r2, #4
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6811      	ldr	r1, [r2, #0]
 8000dc8:	ea43 0200 	orr.w	r2, r3, r0
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	440b      	add	r3, r1
 8000dd2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000dd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3303      	adds	r3, #3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	061a      	lsls	r2, r3, #24
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3302      	adds	r3, #2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	4313      	orrs	r3, r2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	ea43 0200 	orr.w	r2, r3, r0
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	440b      	add	r3, r1
 8000e08:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3318      	adds	r3, #24
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4413      	add	r3, r2
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3318      	adds	r3, #24
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	440b      	add	r3, r1
 8000e2c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e00e      	b.n	8000e50 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e006      	b.n	8000e50 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
  }
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3724      	adds	r7, #36	@ 0x24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b087      	sub	sp, #28
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d003      	beq.n	8000e7e <HAL_CAN_GetRxMessage+0x24>
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	f040 8103 	bne.w	8001084 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10e      	bne.n	8000ea2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0f7      	b.n	8001092 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d107      	bne.n	8000ec0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0e8      	b.n	8001092 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	331b      	adds	r3, #27
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0204 	and.w	r2, r3, #4
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	331b      	adds	r3, #27
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	4413      	add	r3, r2
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0d5b      	lsrs	r3, r3, #21
 8000eee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	331b      	adds	r3, #27
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4413      	add	r3, r2
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	08db      	lsrs	r3, r3, #3
 8000f08:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	331b      	adds	r3, #27
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0202 	and.w	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	331b      	adds	r3, #27
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2208      	movs	r2, #8
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	e00b      	b.n	8000f5e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	331b      	adds	r3, #27
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4413      	add	r3, r2
 8000f52:	3304      	adds	r3, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 020f 	and.w	r2, r3, #15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	331b      	adds	r3, #27
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	331b      	adds	r3, #27
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	3304      	adds	r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0a1a      	lsrs	r2, r3, #8
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0c1a      	lsrs	r2, r3, #16
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0e1a      	lsrs	r2, r3, #24
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3303      	adds	r3, #3
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3304      	adds	r3, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0a1a      	lsrs	r2, r3, #8
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3305      	adds	r3, #5
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	4413      	add	r3, r2
 800102e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0c1a      	lsrs	r2, r3, #16
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3306      	adds	r3, #6
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4413      	add	r3, r2
 8001048:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0e1a      	lsrs	r2, r3, #24
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3307      	adds	r3, #7
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d108      	bne.n	8001070 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	e007      	b.n	8001080 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	e006      	b.n	8001092 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001088:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
  }
}
 8001092:	4618      	mov	r0, r3
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d002      	beq.n	80010ba <HAL_CAN_ActivateNotification+0x1e>
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d109      	bne.n	80010ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6959      	ldr	r1, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e006      	b.n	80010dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
  }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b08a      	sub	sp, #40	@ 0x28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d07c      	beq.n	8001226 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d023      	beq.n	800117e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f983 	bl	8001454 <HAL_CAN_TxMailbox0CompleteCallback>
 800114e:	e016      	b.n	800117e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
 8001162:	e00c      	b.n	800117e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
 8001176:	e002      	b.n	800117e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f986 	bl	800148a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d024      	beq.n	80011d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001190:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f962 	bl	8001466 <HAL_CAN_TxMailbox1CompleteCallback>
 80011a2:	e016      	b.n	80011d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b6:	e00c      	b.n	80011d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ca:	e002      	b.n	80011d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f965 	bl	800149c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d024      	beq.n	8001226 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f941 	bl	8001478 <HAL_CAN_TxMailbox2CompleteCallback>
 80011f6:	e016      	b.n	8001226 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
 800120a:	e00c      	b.n	8001226 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
 800121e:	e002      	b.n	8001226 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f944 	bl	80014ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2210      	movs	r2, #16
 8001248:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2208      	movs	r2, #8
 8001264:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f92a 	bl	80014c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f002 f895 	bl	80033b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00c      	beq.n	80012ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2210      	movs	r2, #16
 80012ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2208      	movs	r2, #8
 80012c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f901 	bl	80014d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f002 f887 	bl	80033fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2210      	movs	r2, #16
 8001308:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8ea 	bl	80014e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2208      	movs	r2, #8
 800132a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f8e2 	bl	80014f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d07b      	beq.n	8001434 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d072      	beq.n	800142c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d043      	beq.n	800142c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03e      	beq.n	800142c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013b4:	2b60      	cmp	r3, #96	@ 0x60
 80013b6:	d02b      	beq.n	8001410 <HAL_CAN_IRQHandler+0x32a>
 80013b8:	2b60      	cmp	r3, #96	@ 0x60
 80013ba:	d82e      	bhi.n	800141a <HAL_CAN_IRQHandler+0x334>
 80013bc:	2b50      	cmp	r3, #80	@ 0x50
 80013be:	d022      	beq.n	8001406 <HAL_CAN_IRQHandler+0x320>
 80013c0:	2b50      	cmp	r3, #80	@ 0x50
 80013c2:	d82a      	bhi.n	800141a <HAL_CAN_IRQHandler+0x334>
 80013c4:	2b40      	cmp	r3, #64	@ 0x40
 80013c6:	d019      	beq.n	80013fc <HAL_CAN_IRQHandler+0x316>
 80013c8:	2b40      	cmp	r3, #64	@ 0x40
 80013ca:	d826      	bhi.n	800141a <HAL_CAN_IRQHandler+0x334>
 80013cc:	2b30      	cmp	r3, #48	@ 0x30
 80013ce:	d010      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x30c>
 80013d0:	2b30      	cmp	r3, #48	@ 0x30
 80013d2:	d822      	bhi.n	800141a <HAL_CAN_IRQHandler+0x334>
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d002      	beq.n	80013de <HAL_CAN_IRQHandler+0x2f8>
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d005      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013dc:	e01d      	b.n	800141a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013e6:	e019      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013f0:	e014      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013fa:	e00f      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001404:	e00a      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800140e:	e005      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001418:	e000      	b.n	800141c <HAL_CAN_IRQHandler+0x336>
            break;
 800141a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800142a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2204      	movs	r2, #4
 8001432:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f85e 	bl	8001508 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
	...

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4906      	ldr	r1, [pc, #24]	@ (80015b4 <__NVIC_EnableIRQ+0x34>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	@ (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	@ 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff90 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff2d 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff42 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff35 	bl	8001580 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d008      	beq.n	8001760 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e020      	b.n	80017a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020e 	bic.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d005      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e051      	b.n	8001874 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020e 	bic.w	r2, r2, #14
 80017de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_DMA_Abort_IT+0xd4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d029      	beq.n	800184e <HAL_DMA_Abort_IT+0xa2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_DMA_Abort_IT+0xd8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_Abort_IT+0x9e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_DMA_Abort_IT+0xdc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_Abort_IT+0x98>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_DMA_Abort_IT+0xe0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d012      	beq.n	800183e <HAL_DMA_Abort_IT+0x92>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <HAL_DMA_Abort_IT+0xe4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00a      	beq.n	8001838 <HAL_DMA_Abort_IT+0x8c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_DMA_Abort_IT+0xe8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d102      	bne.n	8001832 <HAL_DMA_Abort_IT+0x86>
 800182c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001830:	e00e      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001836:	e00b      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001838:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800183c:	e008      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	e005      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001848:	e002      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800184a:	2310      	movs	r3, #16
 800184c:	e000      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800184e:	2301      	movs	r3, #1
 8001850:	4a11      	ldr	r2, [pc, #68]	@ (8001898 <HAL_DMA_Abort_IT+0xec>)
 8001852:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
    } 
  }
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020008 	.word	0x40020008
 8001884:	4002001c 	.word	0x4002001c
 8001888:	40020030 	.word	0x40020030
 800188c:	40020044 	.word	0x40020044
 8001890:	40020058 	.word	0x40020058
 8001894:	4002006c 	.word	0x4002006c
 8001898:	40020000 	.word	0x40020000

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e169      	b.n	8001b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8158 	bne.w	8001b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018d8:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d875      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018de:	4a98      	ldr	r2, [pc, #608]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d058      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018e4:	4a96      	ldr	r2, [pc, #600]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d86f      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018ea:	4a96      	ldr	r2, [pc, #600]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d052      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018f0:	4a94      	ldr	r2, [pc, #592]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d869      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018f6:	4a94      	ldr	r2, [pc, #592]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04c      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018fc:	4a92      	ldr	r2, [pc, #584]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d863      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001902:	4a92      	ldr	r2, [pc, #584]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d046      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 8001908:	4a90      	ldr	r2, [pc, #576]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d85d      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d82a      	bhi.n	8001968 <HAL_GPIO_Init+0xcc>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d859      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_GPIO_Init+0x80>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001997 	.word	0x08001997
 8001920:	08001971 	.word	0x08001971
 8001924:	08001983 	.word	0x08001983
 8001928:	080019c5 	.word	0x080019c5
 800192c:	080019cb 	.word	0x080019cb
 8001930:	080019cb 	.word	0x080019cb
 8001934:	080019cb 	.word	0x080019cb
 8001938:	080019cb 	.word	0x080019cb
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019cb 	.word	0x080019cb
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cb 	.word	0x080019cb
 800194c:	080019cb 	.word	0x080019cb
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019cb 	.word	0x080019cb
 8001958:	080019cb 	.word	0x080019cb
 800195c:	080019cb 	.word	0x080019cb
 8001960:	08001979 	.word	0x08001979
 8001964:	0800198d 	.word	0x0800198d
 8001968:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <HAL_GPIO_Init+0x2b4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e029      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e024      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01f      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e01a      	b.n	80019cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e009      	b.n	80019cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x130>
          break;
 80019ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	@ 0xff
 80019d0:	d801      	bhi.n	80019d6 <HAL_GPIO_Init+0x13a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_Init+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	@ 0xff
 80019e0:	d802      	bhi.n	80019e8 <HAL_GPIO_Init+0x14c>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x152>
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	3b08      	subs	r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	210f      	movs	r1, #15
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80b1 	beq.w	8001b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a34:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1ec>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_GPIO_Init+0x2c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1e0>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9a:	492f      	ldr	r1, [pc, #188]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	492c      	ldr	r1, [pc, #176]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4928      	ldr	r1, [pc, #160]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	491e      	ldr	r1, [pc, #120]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4914      	ldr	r1, [pc, #80]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e021      	b.n	8001b7e <HAL_GPIO_Init+0x2e2>
 8001b3a:	bf00      	nop
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10220000 	.word	0x10220000
 8001b48:	10210000 	.word	0x10210000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40011400 	.word	0x40011400
 8001b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae8e 	bne.w	80018b0 <HAL_GPIO_Init+0x14>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	@ 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43d9      	mvns	r1, r3
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e272      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e24c      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fdd8 	bl	8000898 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe fdd4 	bl	8000898 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e200      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fdc4 	bl	8000898 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7fe fdc0 	bl	8000898 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1ec      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1c0      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fd79 	bl	8000898 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7fe fd75 	bl	8000898 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fd58 	bl	8000898 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7fe fd54 	bl	8000898 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e180      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7fe fd38 	bl	8000898 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fd34 	bl	8000898 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e160      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 face 	bl	80023ec <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fd1e 	bl	8000898 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe fd1a 	bl	8000898 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e146      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b92      	ldr	r3, [pc, #584]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a87      	ldr	r2, [pc, #540]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7fe fcdb 	bl	8000898 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe fcd7 	bl	8000898 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	@ 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e103      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b75      	ldr	r3, [pc, #468]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a69      	ldr	r2, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a66      	ldr	r2, [pc, #408]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a60      	ldr	r2, [pc, #384]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fc8b 	bl	8000898 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fc87 	bl	8000898 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0b1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe fc75 	bl	8000898 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fc71 	bl	8000898 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fc45 	bl	8000898 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe fc41 	bl	8000898 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e06d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4921      	ldr	r1, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	491b      	ldr	r1, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fc15 	bl	8000898 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fc11 	bl	8000898 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e035      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fbfe 	bl	8000898 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fbfa 	bl	8000898 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e019      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_OscConfig+0x500>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fb4c 	bl	8000898 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fb48 	bl	8000898 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe faaa 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08004938 	.word	0x08004938
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x30>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x36>
 800230e:	e027      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	e027      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	08004950 	.word	0x08004950
 8002380:	08004960 	.word	0x08004960
 8002384:	003d0900 	.word	0x003d0900

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b02      	ldr	r3, [pc, #8]	@ (8002398 <HAL_RCC_GetHCLKFreq+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff2 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004948 	.word	0x08004948

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffde 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08004948 	.word	0x08004948

080023ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <RCC_Delay+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <RCC_Delay+0x38>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a5b      	lsrs	r3, r3, #9
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002408:	bf00      	nop
  }
  while (Delay --);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	60fa      	str	r2, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <RCC_Delay+0x1c>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	20000000 	.word	0x20000000
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e042      	b.n	80024c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe f950 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	@ 0x24
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800246a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fdb7 	bl	8002fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d175      	bne.n	80025d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Transmit+0x2c>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e06e      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2221      	movs	r2, #33	@ 0x21
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002506:	f7fe f9c7 	bl	8000898 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800253c:	e02e      	b.n	800259c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fb1c 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03a      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cb      	bne.n	800253e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2140      	movs	r1, #64	@ 0x40
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fae8 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e006      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d112      	bne.n	800261e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Receive_IT+0x26>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e00b      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	461a      	mov	r2, r3
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fb0f 	bl	8002c38 <UART_Start_Receive_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	e000      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0ba      	sub	sp, #232	@ 0xe8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
 800267a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fbec 	bl	8002e64 <UART_Receive_IT>
      return;
 800268c:	e25b      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80de 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
 8002698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80d1 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
 80026e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
 8002706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f043 0208 	orr.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81f2 	beq.w	8002b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fb77 	bl	8002e64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_UART_IRQHandler+0x17a>
 800279a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04f      	beq.n	8002842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa81 	bl	8002caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d041      	beq.n	800283a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1d9      	bne.n	80027b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_UART_IRQHandler+0x3e0>)
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe ffc8 	bl	80017ac <HAL_DMA_Abort_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00e      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f993 	bl	8002b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00a      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f98f 	bl	8002b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e006      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f98b 	bl	8002b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800284e:	e175      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	bf00      	nop
    return;
 8002852:	e173      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 814f 	bne.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8148 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8141 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80b6 	beq.w	8002a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8145 	beq.w	8002b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028be:	429a      	cmp	r2, r3
 80028c0:	f080 813e 	bcs.w	8002b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	f000 8088 	beq.w	80029e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e6:	e853 3f00 	ldrex	r3, [r3]
 80028ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002904:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002910:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800291c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1d9      	bne.n	80028d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002948:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800294c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002950:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800295a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e1      	bne.n	8002924 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002984:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002986:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800298a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e3      	bne.n	8002960 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b8:	f023 0310 	bic.w	r3, r3, #16
 80029bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e3      	bne.n	80029a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fea7 	bl	8001736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8b6 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a04:	e09c      	b.n	8002b40 <HAL_UART_IRQHandler+0x518>
 8002a06:	bf00      	nop
 8002a08:	08002d6f 	.word	0x08002d6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 808e 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8089 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e3      	bne.n	8002a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e3      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f83b 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002afa:	e023      	b.n	8002b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f93e 	bl	8002d96 <UART_Transmit_IT>
    return;
 8002b1a:	e014      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f97d 	bl	8002e34 <UART_EndTransmit_IT>
    return;
 8002b3a:	e004      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b44:	bf00      	nop
  }
}
 8002b46:	37e8      	adds	r7, #232	@ 0xe8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	e03b      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d037      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7fd fe7a 	bl	8000898 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e03a      	b.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d023      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b80      	cmp	r3, #128	@ 0x80
 8002bcc:	d020      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b40      	cmp	r3, #64	@ 0x40
 8002bd2:	d01d      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d116      	bne.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f856 	bl	8002caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2208      	movs	r2, #8
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00f      	b.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d0b4      	beq.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2222      	movs	r2, #34	@ 0x22
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b095      	sub	sp, #84	@ 0x54
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e5      	bne.n	8002cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e5      	bne.n	8002ce6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d119      	bne.n	8002d56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f023 0310 	bic.w	r3, r3, #16
 8002d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d42:	61ba      	str	r2, [r7, #24]
 8002d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e5      	bne.n	8002d22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d64:	bf00      	nop
 8002d66:	3754      	adds	r7, #84	@ 0x54
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fee8 	bl	8002b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b21      	cmp	r3, #33	@ 0x21
 8002da8:	d13e      	bne.n	8002e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	d114      	bne.n	8002dde <UART_Transmit_IT+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d110      	bne.n	8002dde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]
 8002ddc:	e008      	b.n	8002df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6211      	str	r1, [r2, #32]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fe79 	bl	8002b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	@ 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b22      	cmp	r3, #34	@ 0x22
 8002e76:	f040 80ae 	bne.w	8002fd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e82:	d117      	bne.n	8002eb4 <UART_Receive_IT+0x50>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d113      	bne.n	8002eb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb2:	e026      	b.n	8002f02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec6:	d007      	beq.n	8002ed8 <UART_Receive_IT+0x74>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <UART_Receive_IT+0x82>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e008      	b.n	8002ef8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d15d      	bne.n	8002fd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0220 	bic.w	r2, r2, #32
 8002f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d135      	bne.n	8002fc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	613b      	str	r3, [r7, #16]
   return(result);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f023 0310 	bic.w	r3, r3, #16
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f82:	623a      	str	r2, [r7, #32]
 8002f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	69f9      	ldr	r1, [r7, #28]
 8002f88:	6a3a      	ldr	r2, [r7, #32]
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d10a      	bne.n	8002fba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fdd5 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
 8002fc6:	e002      	b.n	8002fce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb03 	bl	80035d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e002      	b.n	8002fd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3730      	adds	r7, #48	@ 0x30
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800301a:	f023 030c 	bic.w	r3, r3, #12
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	430b      	orrs	r3, r1
 8003026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2c      	ldr	r2, [pc, #176]	@ (80030f4 <UART_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff f9bc 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	e002      	b.n	8003056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f9a4 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <UART_SetConfig+0x118>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	0119      	lsls	r1, r3, #4
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <UART_SetConfig+0x118>)
 800308e:	fba3 0302 	umull	r0, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2064      	movs	r0, #100	@ 0x64
 8003096:	fb00 f303 	mul.w	r3, r0, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	@ 0x32
 80030a0:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <UART_SetConfig+0x118>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	4419      	add	r1, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <UART_SetConfig+0x118>)
 80030c6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2064      	movs	r0, #100	@ 0x64
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	3332      	adds	r3, #50	@ 0x32
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	440a      	add	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40013800 	.word	0x40013800
 80030f8:	51eb851f 	.word	0x51eb851f

080030fc <can_txrx_process_demo>:
#include "can.h"
#include "lt_can2.h"


void can_txrx_process_demo(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	static uint32_t can_systick = 0;

	if (get_systick() >= can_systick + 3000)
 8003100:	f000 fa0c 	bl	800351c <get_systick>
 8003104:	4602      	mov	r2, r0
 8003106:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <can_txrx_process_demo+0x74>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800310e:	429a      	cmp	r2, r3
 8003110:	d313      	bcc.n	800313a <can_txrx_process_demo+0x3e>
	{
		// CAN Tx
		if (can_rx_run_completed == 1)
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <can_txrx_process_demo+0x78>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d10a      	bne.n	8003130 <can_txrx_process_demo+0x34>
		{
			can_rx_run_completed = 0;
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <can_txrx_process_demo+0x78>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
			can_tx_process();
 8003120:	f000 f834 	bl	800318c <can_tx_process>
			printf("\r\ncan tx processed .. ");
 8003124:	4814      	ldr	r0, [pc, #80]	@ (8003178 <can_txrx_process_demo+0x7c>)
 8003126:	f000 fb37 	bl	8003798 <iprintf>
			printf("\r\n");
 800312a:	4814      	ldr	r0, [pc, #80]	@ (800317c <can_txrx_process_demo+0x80>)
 800312c:	f000 fb9c 	bl	8003868 <puts>
		}
		can_systick = get_systick();
 8003130:	f000 f9f4 	bl	800351c <get_systick>
 8003134:	4603      	mov	r3, r0
 8003136:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <can_txrx_process_demo+0x74>)
 8003138:	6013      	str	r3, [r2, #0]
	}

	// CAN Rx
	if (can_rx_int_flag == 1)
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <can_txrx_process_demo+0x84>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10d      	bne.n	800315e <can_txrx_process_demo+0x62>
	{
		can_rx_int_flag = 0;
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <can_txrx_process_demo+0x84>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
		can_rx_process();
 8003148:	f000 f898 	bl	800327c <can_rx_process>
		printf("\r\ncan rx processed .. ");
 800314c:	480d      	ldr	r0, [pc, #52]	@ (8003184 <can_txrx_process_demo+0x88>)
 800314e:	f000 fb23 	bl	8003798 <iprintf>
		printf("\r\n>>==============================================END<<");
 8003152:	480d      	ldr	r0, [pc, #52]	@ (8003188 <can_txrx_process_demo+0x8c>)
 8003154:	f000 fb20 	bl	8003798 <iprintf>
		printf("\r\n");
 8003158:	4808      	ldr	r0, [pc, #32]	@ (800317c <can_txrx_process_demo+0x80>)
 800315a:	f000 fb85 	bl	8003868 <puts>
	}

	if (get_can_rx_led_duration_timer() == 0)
 800315e:	f000 fa15 	bl	800358c <get_can_rx_led_duration_timer>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <can_txrx_process_demo+0x70>
		pb12_led_off();
 8003168:	f000 f9b2 	bl	80034d0 <pb12_led_off>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000178 	.word	0x20000178
 8003174:	20000009 	.word	0x20000009
 8003178:	08004760 	.word	0x08004760
 800317c:	08004778 	.word	0x08004778
 8003180:	2000014c 	.word	0x2000014c
 8003184:	0800477c 	.word	0x0800477c
 8003188:	08004794 	.word	0x08004794

0800318c <can_tx_process>:
		pb12_led_off();
}

uint8_t can_tx_run_completed = 0;
void can_tx_process(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
	static uint32_t tx_pkt_cnt = 0;

	// 메인 초기화시에 1회 설정으로 끝내도 되는 것 같아 그리로 옮김
	//can_tx_packet_header_config();

	printf("\r\n");
 8003196:	482a      	ldr	r0, [pc, #168]	@ (8003240 <can_tx_process+0xb4>)
 8003198:	f000 fb66 	bl	8003868 <puts>
	printf("\r\n>>BEGIN============================================<<");
 800319c:	4829      	ldr	r0, [pc, #164]	@ (8003244 <can_tx_process+0xb8>)
 800319e:	f000 fafb 	bl	8003798 <iprintf>
	printf("\r\nCAN Op Mode : %s", _can_op_mode?"Normal":"Loopback");
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <can_tx_process+0xbc>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <can_tx_process+0x22>
 80031aa:	4b28      	ldr	r3, [pc, #160]	@ (800324c <can_tx_process+0xc0>)
 80031ac:	e000      	b.n	80031b0 <can_tx_process+0x24>
 80031ae:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <can_tx_process+0xc4>)
 80031b0:	4619      	mov	r1, r3
 80031b2:	4828      	ldr	r0, [pc, #160]	@ (8003254 <can_tx_process+0xc8>)
 80031b4:	f000 faf0 	bl	8003798 <iprintf>
	printf("\r\n>> CAN Tx Data[%d] : ", (int)++tx_pkt_cnt);
 80031b8:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <can_tx_process+0xcc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a26      	ldr	r2, [pc, #152]	@ (8003258 <can_tx_process+0xcc>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <can_tx_process+0xcc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4824      	ldr	r0, [pc, #144]	@ (800325c <can_tx_process+0xd0>)
 80031ca:	f000 fae5 	bl	8003798 <iprintf>
	for (i=0; i<CanTxHeader.DLC; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e015      	b.n	8003200 <can_tx_process+0x74>
	{
		CanTxData[i] = i + tx_change;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <can_tx_process+0xd4>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	b2d9      	uxtb	r1, r3
 80031e0:	4a20      	ldr	r2, [pc, #128]	@ (8003264 <can_tx_process+0xd8>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	460a      	mov	r2, r1
 80031e8:	701a      	strb	r2, [r3, #0]
		printf("%d ", CanTxData[i]);
 80031ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <can_tx_process+0xd8>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	481c      	ldr	r0, [pc, #112]	@ (8003268 <can_tx_process+0xdc>)
 80031f6:	f000 facf 	bl	8003798 <iprintf>
	for (i=0; i<CanTxHeader.DLC; i++)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3301      	adds	r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <can_tx_process+0xe0>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3e4      	bcc.n	80031d4 <can_tx_process+0x48>
	}

	HAL_CAN_AddTxMessage(&hcanHandle, &CanTxHeader, &CanTxData[0], &TxMailBox);
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <can_tx_process+0xe4>)
 800320c:	4a15      	ldr	r2, [pc, #84]	@ (8003264 <can_tx_process+0xd8>)
 800320e:	4917      	ldr	r1, [pc, #92]	@ (800326c <can_tx_process+0xe0>)
 8003210:	4818      	ldr	r0, [pc, #96]	@ (8003274 <can_tx_process+0xe8>)
 8003212:	f7fd fd53 	bl	8000cbc <HAL_CAN_AddTxMessage>

	tx_change++;
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <can_tx_process+0xd4>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <can_tx_process+0xd4>)
 8003220:	701a      	strb	r2, [r3, #0]
	if (tx_change >= 100)
 8003222:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <can_tx_process+0xd4>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b63      	cmp	r3, #99	@ 0x63
 8003228:	d902      	bls.n	8003230 <can_tx_process+0xa4>
		tx_change = 0;
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <can_tx_process+0xd4>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

	can_tx_run_completed = 1;
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <can_tx_process+0xec>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	08004778 	.word	0x08004778
 8003244:	080047cc 	.word	0x080047cc
 8003248:	20000103 	.word	0x20000103
 800324c:	08004804 	.word	0x08004804
 8003250:	0800480c 	.word	0x0800480c
 8003254:	08004818 	.word	0x08004818
 8003258:	2000017c 	.word	0x2000017c
 800325c:	0800482c 	.word	0x0800482c
 8003260:	20000180 	.word	0x20000180
 8003264:	20000140 	.word	0x20000140
 8003268:	08004844 	.word	0x08004844
 800326c:	20000120 	.word	0x20000120
 8003270:	20000148 	.word	0x20000148
 8003274:	20000084 	.word	0x20000084
 8003278:	20000100 	.word	0x20000100

0800327c <can_rx_process>:



uint8_t can_rx_run_completed = 1;
void can_rx_process(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]

	printf("\r\n");
 8003286:	4826      	ldr	r0, [pc, #152]	@ (8003320 <can_rx_process+0xa4>)
 8003288:	f000 faee 	bl	8003868 <puts>
	printf("\r\n>>----------------------------------------------<<");
 800328c:	4825      	ldr	r0, [pc, #148]	@ (8003324 <can_rx_process+0xa8>)
 800328e:	f000 fa83 	bl	8003798 <iprintf>
	//printf("\r\nCAN Filtering Mode : %s", "16bit List");
	printf("\r\nCAN Op Mode : %s", _can_op_mode?"Normal":"Loopback");
 8003292:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <can_rx_process+0xac>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <can_rx_process+0x22>
 800329a:	4b24      	ldr	r3, [pc, #144]	@ (800332c <can_rx_process+0xb0>)
 800329c:	e000      	b.n	80032a0 <can_rx_process+0x24>
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <can_rx_process+0xb4>)
 80032a0:	4619      	mov	r1, r3
 80032a2:	4824      	ldr	r0, [pc, #144]	@ (8003334 <can_rx_process+0xb8>)
 80032a4:	f000 fa78 	bl	8003798 <iprintf>
	printf("\r\nCAN Filtering Mode : %s %s",
																_can_filter_bit?"32bit":"16bit",
 80032a8:	4b23      	ldr	r3, [pc, #140]	@ (8003338 <can_rx_process+0xbc>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
	printf("\r\nCAN Filtering Mode : %s %s",
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <can_rx_process+0x38>
 80032b0:	4922      	ldr	r1, [pc, #136]	@ (800333c <can_rx_process+0xc0>)
 80032b2:	e000      	b.n	80032b6 <can_rx_process+0x3a>
 80032b4:	4922      	ldr	r1, [pc, #136]	@ (8003340 <can_rx_process+0xc4>)
																_can_filter_mode?"Mask":"List");
 80032b6:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <can_rx_process+0xc8>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
	printf("\r\nCAN Filtering Mode : %s %s",
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <can_rx_process+0x46>
 80032be:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <can_rx_process+0xcc>)
 80032c0:	e000      	b.n	80032c4 <can_rx_process+0x48>
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <can_rx_process+0xd0>)
 80032c4:	461a      	mov	r2, r3
 80032c6:	4822      	ldr	r0, [pc, #136]	@ (8003350 <can_rx_process+0xd4>)
 80032c8:	f000 fa66 	bl	8003798 <iprintf>
	printf("\r\n>>----------------------------------------------<<");
 80032cc:	4815      	ldr	r0, [pc, #84]	@ (8003324 <can_rx_process+0xa8>)
 80032ce:	f000 fa63 	bl	8003798 <iprintf>
	printf("\r\nStdID : 0x%04lx, IDE : 0x%ld, DLC : %ld",
 80032d2:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <can_rx_process+0xd8>)
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <can_rx_process+0xd8>)
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <can_rx_process+0xd8>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	481e      	ldr	r0, [pc, #120]	@ (8003358 <can_rx_process+0xdc>)
 80032e0:	f000 fa5a 	bl	8003798 <iprintf>
						CanRxHeader.StdId, CanRxHeader.IDE, CanRxHeader.DLC);

	printf("\r\n>> CAN Rx Data : ");
 80032e4:	481d      	ldr	r0, [pc, #116]	@ (800335c <can_rx_process+0xe0>)
 80032e6:	f000 fa57 	bl	8003798 <iprintf>
	for (i=0; i<CanRxHeader.DLC; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	e00a      	b.n	8003306 <can_rx_process+0x8a>
	{
		printf("%d ", CanRxData[i]);
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <can_rx_process+0xe4>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	481a      	ldr	r0, [pc, #104]	@ (8003364 <can_rx_process+0xe8>)
 80032fc:	f000 fa4c 	bl	8003798 <iprintf>
	for (i=0; i<CanRxHeader.DLC; i++)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3301      	adds	r3, #1
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <can_rx_process+0xd8>)
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	429a      	cmp	r2, r3
 800330e:	d3ef      	bcc.n	80032f0 <can_rx_process+0x74>
	}

	can_rx_run_completed = 1;
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <can_rx_process+0xec>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08004778 	.word	0x08004778
 8003324:	08004848 	.word	0x08004848
 8003328:	20000103 	.word	0x20000103
 800332c:	08004804 	.word	0x08004804
 8003330:	0800480c 	.word	0x0800480c
 8003334:	08004818 	.word	0x08004818
 8003338:	20000102 	.word	0x20000102
 800333c:	08004880 	.word	0x08004880
 8003340:	08004888 	.word	0x08004888
 8003344:	20000101 	.word	0x20000101
 8003348:	08004890 	.word	0x08004890
 800334c:	08004898 	.word	0x08004898
 8003350:	080048a0 	.word	0x080048a0
 8003354:	20000104 	.word	0x20000104
 8003358:	080048c0 	.word	0x080048c0
 800335c:	080048ec 	.word	0x080048ec
 8003360:	20000138 	.word	0x20000138
 8003364:	08004844 	.word	0x08004844
 8003368:	20000009 	.word	0x20000009

0800336c <can_operation_mode_display>:

uint8_t _can_filter_mode = 0, _can_filter_bit = 0, _can_op_mode = 0;
void can_operation_mode_display(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
#if defined	_CAN_FILTER_LIST_MODE
	_can_filter_mode = 0;
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <can_operation_mode_display+0x38>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
#elif defined _CAN_FILTER_MASK_MODE
	_can_filter_mode = 1;
#endif

#if defined _CAN_16BIT_MODE
	_can_filter_bit = 0;
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <can_operation_mode_display+0x3c>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
#elif defined _CAN_32BIT_MODE
	_can_filter_bit = 1;
#endif

	if (hcan.Init.Mode == CAN_MODE_NORMAL)
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <can_operation_mode_display+0x40>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d103      	bne.n	800338c <can_operation_mode_display+0x20>
		_can_op_mode = 1;
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <can_operation_mode_display+0x44>)
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
	else if (hcan.Init.Mode == CAN_MODE_LOOPBACK)
		_can_op_mode = 0;
}
 800338a:	e007      	b.n	800339c <can_operation_mode_display+0x30>
	else if (hcan.Init.Mode == CAN_MODE_LOOPBACK)
 800338c:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <can_operation_mode_display+0x40>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003394:	d102      	bne.n	800339c <can_operation_mode_display+0x30>
		_can_op_mode = 0;
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <can_operation_mode_display+0x44>)
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	20000101 	.word	0x20000101
 80033a8:	20000102 	.word	0x20000102
 80033ac:	20000084 	.word	0x20000084
 80033b0:	20000103 	.word	0x20000103

080033b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailBox = 0;
uint8_t can_rx_int_flag = 0;
#define	CAN_RX_LED_DURATION	100

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	// printf 사용시 메모리 할당체계와 관계가 있을 것 같다는 게 있는데 여기서는 어디서 손을 대야하는 지
	// 잘 모르것다.

	//printf("\r\nCan Rx0 int");
	// Get Rx message
	if (hcan->Instance == CAN1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, &CanRxData[0]);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80033c8:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80033ca:	2100      	movs	r1, #0
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fd fd44 	bl	8000e5a <HAL_CAN_GetRxMessage>
		pb12_led_toggle();
 80033d2:	f000 f889 	bl	80034e8 <pb12_led_toggle>
		set_can_rx_led_duration_timer(CAN_RX_LED_DURATION);
 80033d6:	2064      	movs	r0, #100	@ 0x64
 80033d8:	f000 f8c6 	bl	8003568 <set_can_rx_led_duration_timer>
		can_rx_int_flag = 1;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
	}
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40006400 	.word	0x40006400
 80033f0:	20000138 	.word	0x20000138
 80033f4:	20000104 	.word	0x20000104
 80033f8:	2000014c 	.word	0x2000014c

080033fc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	printf("\r\nCan Rx1 int");
 8003404:	480b      	ldr	r0, [pc, #44]	@ (8003434 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8003406:	f000 f9c7 	bl	8003798 <iprintf>
	// Get Rx message
	if (hcan->Instance == CAN1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10b      	bne.n	800342c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CanRxHeader, &CanRxData[0]);
 8003414:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8003416:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8003418:	2101      	movs	r1, #1
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fd1d 	bl	8000e5a <HAL_CAN_GetRxMessage>
		set_can_rx_led_duration_timer(200);
 8003420:	20c8      	movs	r0, #200	@ 0xc8
 8003422:	f000 f8a1 	bl	8003568 <set_can_rx_led_duration_timer>
		can_rx_int_flag = 1;
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
	}
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	08004900 	.word	0x08004900
 8003438:	40006400 	.word	0x40006400
 800343c:	20000138 	.word	0x20000138
 8003440:	20000104 	.word	0x20000104
 8003444:	2000014c 	.word	0x2000014c

08003448 <can_tx_packet_header_config>:



void can_tx_packet_header_config(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
#if defined _CAN_FILTER_LIST_MODE
	CanTxHeader.StdId = 0x543;                 // Standard Identifier, 0 ~ 0x7FF, 오리지날 0x543
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <can_tx_packet_header_config+0x34>)
 800344e:	f240 5243 	movw	r2, #1347	@ 0x543
 8003452:	601a      	str	r2, [r3, #0]
	CanTxHeader.StdId = 0x541;//0x543;                 // Standard Identifier, 0 ~ 0x7FF, 오리지날 0x543
#elif defined _CAN_32BIT_MODE
	CanTxHeader.StdId = 0x542;
#endif
#endif
	CanTxHeader.ExtId = 0x210;                 // Extended Identifier, 0 ~ 0x1FFFFFFF
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <can_tx_packet_header_config+0x34>)
 8003456:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800345a:	605a      	str	r2, [r3, #4]
	CanTxHeader.RTR = CAN_RTR_DATA;            // 전송하는 메세지의 프레임 타입, DATA or REMOTE
 800345c:	4b07      	ldr	r3, [pc, #28]	@ (800347c <can_tx_packet_header_config+0x34>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
	CanTxHeader.IDE = CAN_ID_STD;              // 전송하는 메세지의 식별자 타입, STD or EXT
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <can_tx_packet_header_config+0x34>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
	CanTxHeader.DLC = 8;                       // 송신 프레임 길이, 0 ~ 8 byte
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <can_tx_packet_header_config+0x34>)
 800346a:	2208      	movs	r2, #8
 800346c:	611a      	str	r2, [r3, #16]
	CanTxHeader.TransmitGlobalTime = DISABLE;  // 프레임 전송 시작될 때 timestamp counter 값을 capture.
 800346e:	4b03      	ldr	r3, [pc, #12]	@ (800347c <can_tx_packet_header_config+0x34>)
 8003470:	2200      	movs	r2, #0
 8003472:	751a      	strb	r2, [r3, #20]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000120 	.word	0x20000120

08003480 <can_rx_packet_filter_config>:

CAN_FilterTypeDef  CanRxFilterConfig;   // 필터 설정 구조체 변수
void can_rx_packet_filter_config(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
	/* CAN Filter 설정 */
	CanRxFilterConfig.FilterBank = 0;
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
*/
#endif//--1
#endif
#elif defined	_CAN_FILTER_LIST_MODE
#if defined _CAN_16BIT_MODE//1// 16bit list mode ok
	CanRxFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
	CanRxFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;			// CAN_FILTERMODE_IDMASK or CAN_FILTERMODE_IDLIST
 8003490:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 8003492:	2201      	movs	r2, #1
 8003494:	619a      	str	r2, [r3, #24]
	CanRxFilterConfig.FilterIdHigh = 0x0543<<5;							// OK
 8003496:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 8003498:	f64a 0260 	movw	r2, #43104	@ 0xa860
 800349c:	601a      	str	r2, [r3, #0]
	CanRxFilterConfig.FilterIdLow = 0x0543<<5;							// OK
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034a0:	f64a 0260 	movw	r2, #43104	@ 0xa860
 80034a4:	605a      	str	r2, [r3, #4]
	CanRxFilterConfig.FilterMaskIdHigh = 0x0000;              // 0x00000000 = 모든 ID를 받아들이겠다
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
	CanRxFilterConfig.FilterMaskIdLow = 0x0000;
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
	CanRxFilterConfig.FilterIdLow = 0;						//
	CanRxFilterConfig.FilterMaskIdHigh = (0x210<<3)>>16;              // 0x00000000 = 모든 ID를 받아들이겠다
	CanRxFilterConfig.FilterMaskIdLow = (0x210<<3) | CAN_ID_EXT;
#endif//
#endif
	CanRxFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;		// choose whether RxFiFo0 or RxFiFo1
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
	CanRxFilterConfig.FilterActivation = ENABLE;							// choose whether use Filter or Not
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	621a      	str	r2, [r3, #32]
	CanRxFilterConfig.SlaveStartFilterBank = 14;              // CAN2의 FilterBank시작 위치, CAN2를 사용한다면 FilterBank를 SlaveStartFilterBank보다 크게 설정해야 함.
 80034be:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <can_rx_packet_filter_config+0x4c>)
 80034c0:	220e      	movs	r2, #14
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	20000150 	.word	0x20000150

080034d0 <pb12_led_off>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
}

void pb12_led_off(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034da:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <pb12_led_off+0x14>)
 80034dc:	f7fe fb62 	bl	8001ba4 <HAL_GPIO_WritePin>
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010c00 	.word	0x40010c00

080034e8 <pb12_led_toggle>:

void pb12_led_toggle(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80034ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034f0:	4802      	ldr	r0, [pc, #8]	@ (80034fc <pb12_led_toggle+0x14>)
 80034f2:	f7fe fb6f 	bl	8001bd4 <HAL_GPIO_TogglePin>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40010c00 	.word	0x40010c00

08003500 <inc_systick>:


static uint32_t lt_systick = 0;

void inc_systick(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	lt_systick++;
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <inc_systick+0x18>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a03      	ldr	r2, [pc, #12]	@ (8003518 <inc_systick+0x18>)
 800350c:	6013      	str	r3, [r2, #0]

	timer_value_decrease_function();
 800350e:	f000 f80f 	bl	8003530 <timer_value_decrease_function>

	//if (can_rx_led_duration_timer_value > 0) can_rx_led_duration_timer_value--;
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000184 	.word	0x20000184

0800351c <get_systick>:

uint32_t get_systick(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	return lt_systick;
 8003520:	4b02      	ldr	r3, [pc, #8]	@ (800352c <get_systick+0x10>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000184 	.word	0x20000184

08003530 <timer_value_decrease_function>:
#include "lt_timer.h"


// 0. timer value decrement function
void timer_value_decrease_function(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	if (can_rx_led_duration_timer_value > 0) can_rx_led_duration_timer_value--;
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <timer_value_decrease_function+0x30>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <timer_value_decrease_function+0x16>
 800353c:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <timer_value_decrease_function+0x30>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <timer_value_decrease_function+0x30>)
 8003544:	6013      	str	r3, [r2, #0]
	if (can_tx_led_duration_timer_value > 0) can_tx_led_duration_timer_value--;
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <timer_value_decrease_function+0x34>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <timer_value_decrease_function+0x28>
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <timer_value_decrease_function+0x34>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3b01      	subs	r3, #1
 8003554:	4a03      	ldr	r2, [pc, #12]	@ (8003564 <timer_value_decrease_function+0x34>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000188 	.word	0x20000188
 8003564:	2000018c 	.word	0x2000018c

08003568 <set_can_rx_led_duration_timer>:

// 1.
uint32_t can_rx_led_duration_timer_value = 0;

void set_can_rx_led_duration_timer(uint32_t TimerTick32)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003570:	b672      	cpsid	i
}
 8003572:	bf00      	nop
	__disable_irq();

	can_rx_led_duration_timer_value = TimerTick32;
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <set_can_rx_led_duration_timer+0x20>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
}
 800357c:	bf00      	nop

	__enable_irq();
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000188 	.word	0x20000188

0800358c <get_can_rx_led_duration_timer>:

uint32_t get_can_rx_led_duration_timer(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003592:	b672      	cpsid	i
}
 8003594:	bf00      	nop
	uint32_t V32;

	__disable_irq();

	V32 = can_rx_led_duration_timer_value;
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <get_can_rx_led_duration_timer+0x20>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800359c:	b662      	cpsie	i
}
 800359e:	bf00      	nop

	__enable_irq();

	return	V32;
 80035a0:	687b      	ldr	r3, [r7, #4]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	20000188 	.word	0x20000188

080035b0 <__io_putchar>:

#include "usart.h"
#include "lt_uart.h"

int __io_putchar(int ch)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	(void)HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 80035b8:	1d39      	adds	r1, r7, #4
 80035ba:	2364      	movs	r3, #100	@ 0x64
 80035bc:	2201      	movs	r2, #1
 80035be:	4804      	ldr	r0, [pc, #16]	@ (80035d0 <__io_putchar+0x20>)
 80035c0:	f7fe ff82 	bl	80024c8 <HAL_UART_Transmit>

	return 1;
 80035c4:	2301      	movs	r3, #1
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200000b4 	.word	0x200000b4

080035d4 <HAL_UART_RxCpltCallback>:


uint8_t rx_data1 = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_UART_RxCpltCallback+0x30>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10a      	bne.n	80035fc <HAL_UART_RxCpltCallback+0x28>
	{
		printf("\r\nrx_data1 : %c", (char)rx_data1);
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_UART_RxCpltCallback+0x34>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4807      	ldr	r0, [pc, #28]	@ (800360c <HAL_UART_RxCpltCallback+0x38>)
 80035ee:	f000 f8d3 	bl	8003798 <iprintf>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data1, 1);
 80035f2:	2201      	movs	r2, #1
 80035f4:	4904      	ldr	r1, [pc, #16]	@ (8003608 <HAL_UART_RxCpltCallback+0x34>)
 80035f6:	4806      	ldr	r0, [pc, #24]	@ (8003610 <HAL_UART_RxCpltCallback+0x3c>)
 80035f8:	f7fe fff1 	bl	80025de <HAL_UART_Receive_IT>
	}
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40013800 	.word	0x40013800
 8003608:	20000190 	.word	0x20000190
 800360c:	08004928 	.word	0x08004928
 8003610:	200000b4 	.word	0x200000b4

08003614 <std>:
 8003614:	2300      	movs	r3, #0
 8003616:	b510      	push	{r4, lr}
 8003618:	4604      	mov	r4, r0
 800361a:	e9c0 3300 	strd	r3, r3, [r0]
 800361e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003622:	6083      	str	r3, [r0, #8]
 8003624:	8181      	strh	r1, [r0, #12]
 8003626:	6643      	str	r3, [r0, #100]	@ 0x64
 8003628:	81c2      	strh	r2, [r0, #14]
 800362a:	6183      	str	r3, [r0, #24]
 800362c:	4619      	mov	r1, r3
 800362e:	2208      	movs	r2, #8
 8003630:	305c      	adds	r0, #92	@ 0x5c
 8003632:	f000 faad 	bl	8003b90 <memset>
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <std+0x58>)
 8003638:	6224      	str	r4, [r4, #32]
 800363a:	6263      	str	r3, [r4, #36]	@ 0x24
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <std+0x5c>)
 800363e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <std+0x60>)
 8003642:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <std+0x64>)
 8003646:	6323      	str	r3, [r4, #48]	@ 0x30
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <std+0x68>)
 800364a:	429c      	cmp	r4, r3
 800364c:	d006      	beq.n	800365c <std+0x48>
 800364e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003652:	4294      	cmp	r4, r2
 8003654:	d002      	beq.n	800365c <std+0x48>
 8003656:	33d0      	adds	r3, #208	@ 0xd0
 8003658:	429c      	cmp	r4, r3
 800365a:	d105      	bne.n	8003668 <std+0x54>
 800365c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003664:	f000 bb0c 	b.w	8003c80 <__retarget_lock_init_recursive>
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	080039e1 	.word	0x080039e1
 8003670:	08003a03 	.word	0x08003a03
 8003674:	08003a3b 	.word	0x08003a3b
 8003678:	08003a5f 	.word	0x08003a5f
 800367c:	20000194 	.word	0x20000194

08003680 <stdio_exit_handler>:
 8003680:	4a02      	ldr	r2, [pc, #8]	@ (800368c <stdio_exit_handler+0xc>)
 8003682:	4903      	ldr	r1, [pc, #12]	@ (8003690 <stdio_exit_handler+0x10>)
 8003684:	4803      	ldr	r0, [pc, #12]	@ (8003694 <stdio_exit_handler+0x14>)
 8003686:	f000 b869 	b.w	800375c <_fwalk_sglue>
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c
 8003690:	08004529 	.word	0x08004529
 8003694:	2000001c 	.word	0x2000001c

08003698 <cleanup_stdio>:
 8003698:	6841      	ldr	r1, [r0, #4]
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <cleanup_stdio+0x34>)
 800369c:	b510      	push	{r4, lr}
 800369e:	4299      	cmp	r1, r3
 80036a0:	4604      	mov	r4, r0
 80036a2:	d001      	beq.n	80036a8 <cleanup_stdio+0x10>
 80036a4:	f000 ff40 	bl	8004528 <_fflush_r>
 80036a8:	68a1      	ldr	r1, [r4, #8]
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <cleanup_stdio+0x38>)
 80036ac:	4299      	cmp	r1, r3
 80036ae:	d002      	beq.n	80036b6 <cleanup_stdio+0x1e>
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 ff39 	bl	8004528 <_fflush_r>
 80036b6:	68e1      	ldr	r1, [r4, #12]
 80036b8:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <cleanup_stdio+0x3c>)
 80036ba:	4299      	cmp	r1, r3
 80036bc:	d004      	beq.n	80036c8 <cleanup_stdio+0x30>
 80036be:	4620      	mov	r0, r4
 80036c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c4:	f000 bf30 	b.w	8004528 <_fflush_r>
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	bf00      	nop
 80036cc:	20000194 	.word	0x20000194
 80036d0:	200001fc 	.word	0x200001fc
 80036d4:	20000264 	.word	0x20000264

080036d8 <global_stdio_init.part.0>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <global_stdio_init.part.0+0x30>)
 80036dc:	4c0b      	ldr	r4, [pc, #44]	@ (800370c <global_stdio_init.part.0+0x34>)
 80036de:	4a0c      	ldr	r2, [pc, #48]	@ (8003710 <global_stdio_init.part.0+0x38>)
 80036e0:	4620      	mov	r0, r4
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	2104      	movs	r1, #4
 80036e6:	2200      	movs	r2, #0
 80036e8:	f7ff ff94 	bl	8003614 <std>
 80036ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036f0:	2201      	movs	r2, #1
 80036f2:	2109      	movs	r1, #9
 80036f4:	f7ff ff8e 	bl	8003614 <std>
 80036f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036fc:	2202      	movs	r2, #2
 80036fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003702:	2112      	movs	r1, #18
 8003704:	f7ff bf86 	b.w	8003614 <std>
 8003708:	200002cc 	.word	0x200002cc
 800370c:	20000194 	.word	0x20000194
 8003710:	08003681 	.word	0x08003681

08003714 <__sfp_lock_acquire>:
 8003714:	4801      	ldr	r0, [pc, #4]	@ (800371c <__sfp_lock_acquire+0x8>)
 8003716:	f000 bab4 	b.w	8003c82 <__retarget_lock_acquire_recursive>
 800371a:	bf00      	nop
 800371c:	200002d5 	.word	0x200002d5

08003720 <__sfp_lock_release>:
 8003720:	4801      	ldr	r0, [pc, #4]	@ (8003728 <__sfp_lock_release+0x8>)
 8003722:	f000 baaf 	b.w	8003c84 <__retarget_lock_release_recursive>
 8003726:	bf00      	nop
 8003728:	200002d5 	.word	0x200002d5

0800372c <__sinit>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	f7ff fff0 	bl	8003714 <__sfp_lock_acquire>
 8003734:	6a23      	ldr	r3, [r4, #32]
 8003736:	b11b      	cbz	r3, 8003740 <__sinit+0x14>
 8003738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800373c:	f7ff bff0 	b.w	8003720 <__sfp_lock_release>
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <__sinit+0x28>)
 8003742:	6223      	str	r3, [r4, #32]
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <__sinit+0x2c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f5      	bne.n	8003738 <__sinit+0xc>
 800374c:	f7ff ffc4 	bl	80036d8 <global_stdio_init.part.0>
 8003750:	e7f2      	b.n	8003738 <__sinit+0xc>
 8003752:	bf00      	nop
 8003754:	08003699 	.word	0x08003699
 8003758:	200002cc 	.word	0x200002cc

0800375c <_fwalk_sglue>:
 800375c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003760:	4607      	mov	r7, r0
 8003762:	4688      	mov	r8, r1
 8003764:	4614      	mov	r4, r2
 8003766:	2600      	movs	r6, #0
 8003768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800376c:	f1b9 0901 	subs.w	r9, r9, #1
 8003770:	d505      	bpl.n	800377e <_fwalk_sglue+0x22>
 8003772:	6824      	ldr	r4, [r4, #0]
 8003774:	2c00      	cmp	r4, #0
 8003776:	d1f7      	bne.n	8003768 <_fwalk_sglue+0xc>
 8003778:	4630      	mov	r0, r6
 800377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800377e:	89ab      	ldrh	r3, [r5, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d907      	bls.n	8003794 <_fwalk_sglue+0x38>
 8003784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003788:	3301      	adds	r3, #1
 800378a:	d003      	beq.n	8003794 <_fwalk_sglue+0x38>
 800378c:	4629      	mov	r1, r5
 800378e:	4638      	mov	r0, r7
 8003790:	47c0      	blx	r8
 8003792:	4306      	orrs	r6, r0
 8003794:	3568      	adds	r5, #104	@ 0x68
 8003796:	e7e9      	b.n	800376c <_fwalk_sglue+0x10>

08003798 <iprintf>:
 8003798:	b40f      	push	{r0, r1, r2, r3}
 800379a:	b507      	push	{r0, r1, r2, lr}
 800379c:	4906      	ldr	r1, [pc, #24]	@ (80037b8 <iprintf+0x20>)
 800379e:	ab04      	add	r3, sp, #16
 80037a0:	6808      	ldr	r0, [r1, #0]
 80037a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a6:	6881      	ldr	r1, [r0, #8]
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	f000 fb93 	bl	8003ed4 <_vfiprintf_r>
 80037ae:	b003      	add	sp, #12
 80037b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b4:	b004      	add	sp, #16
 80037b6:	4770      	bx	lr
 80037b8:	20000018 	.word	0x20000018

080037bc <_puts_r>:
 80037bc:	6a03      	ldr	r3, [r0, #32]
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	4605      	mov	r5, r0
 80037c2:	460e      	mov	r6, r1
 80037c4:	6884      	ldr	r4, [r0, #8]
 80037c6:	b90b      	cbnz	r3, 80037cc <_puts_r+0x10>
 80037c8:	f7ff ffb0 	bl	800372c <__sinit>
 80037cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037ce:	07db      	lsls	r3, r3, #31
 80037d0:	d405      	bmi.n	80037de <_puts_r+0x22>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	0598      	lsls	r0, r3, #22
 80037d6:	d402      	bmi.n	80037de <_puts_r+0x22>
 80037d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037da:	f000 fa52 	bl	8003c82 <__retarget_lock_acquire_recursive>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	0719      	lsls	r1, r3, #28
 80037e2:	d502      	bpl.n	80037ea <_puts_r+0x2e>
 80037e4:	6923      	ldr	r3, [r4, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d135      	bne.n	8003856 <_puts_r+0x9a>
 80037ea:	4621      	mov	r1, r4
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 f979 	bl	8003ae4 <__swsetup_r>
 80037f2:	b380      	cbz	r0, 8003856 <_puts_r+0x9a>
 80037f4:	f04f 35ff 	mov.w	r5, #4294967295
 80037f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037fa:	07da      	lsls	r2, r3, #31
 80037fc:	d405      	bmi.n	800380a <_puts_r+0x4e>
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	059b      	lsls	r3, r3, #22
 8003802:	d402      	bmi.n	800380a <_puts_r+0x4e>
 8003804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003806:	f000 fa3d 	bl	8003c84 <__retarget_lock_release_recursive>
 800380a:	4628      	mov	r0, r5
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	2b00      	cmp	r3, #0
 8003810:	da04      	bge.n	800381c <_puts_r+0x60>
 8003812:	69a2      	ldr	r2, [r4, #24]
 8003814:	429a      	cmp	r2, r3
 8003816:	dc17      	bgt.n	8003848 <_puts_r+0x8c>
 8003818:	290a      	cmp	r1, #10
 800381a:	d015      	beq.n	8003848 <_puts_r+0x8c>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	6022      	str	r2, [r4, #0]
 8003822:	7019      	strb	r1, [r3, #0]
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800382a:	3b01      	subs	r3, #1
 800382c:	60a3      	str	r3, [r4, #8]
 800382e:	2900      	cmp	r1, #0
 8003830:	d1ed      	bne.n	800380e <_puts_r+0x52>
 8003832:	2b00      	cmp	r3, #0
 8003834:	da11      	bge.n	800385a <_puts_r+0x9e>
 8003836:	4622      	mov	r2, r4
 8003838:	210a      	movs	r1, #10
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f913 	bl	8003a66 <__swbuf_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d0d7      	beq.n	80037f4 <_puts_r+0x38>
 8003844:	250a      	movs	r5, #10
 8003846:	e7d7      	b.n	80037f8 <_puts_r+0x3c>
 8003848:	4622      	mov	r2, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f90b 	bl	8003a66 <__swbuf_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d1e7      	bne.n	8003824 <_puts_r+0x68>
 8003854:	e7ce      	b.n	80037f4 <_puts_r+0x38>
 8003856:	3e01      	subs	r6, #1
 8003858:	e7e4      	b.n	8003824 <_puts_r+0x68>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	6022      	str	r2, [r4, #0]
 8003860:	220a      	movs	r2, #10
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e7ee      	b.n	8003844 <_puts_r+0x88>
	...

08003868 <puts>:
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <puts+0xc>)
 800386a:	4601      	mov	r1, r0
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	f7ff bfa5 	b.w	80037bc <_puts_r>
 8003872:	bf00      	nop
 8003874:	20000018 	.word	0x20000018

08003878 <setvbuf>:
 8003878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800387c:	461d      	mov	r5, r3
 800387e:	4b57      	ldr	r3, [pc, #348]	@ (80039dc <setvbuf+0x164>)
 8003880:	4604      	mov	r4, r0
 8003882:	681f      	ldr	r7, [r3, #0]
 8003884:	460e      	mov	r6, r1
 8003886:	4690      	mov	r8, r2
 8003888:	b127      	cbz	r7, 8003894 <setvbuf+0x1c>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	b913      	cbnz	r3, 8003894 <setvbuf+0x1c>
 800388e:	4638      	mov	r0, r7
 8003890:	f7ff ff4c 	bl	800372c <__sinit>
 8003894:	f1b8 0f02 	cmp.w	r8, #2
 8003898:	d006      	beq.n	80038a8 <setvbuf+0x30>
 800389a:	f1b8 0f01 	cmp.w	r8, #1
 800389e:	f200 809a 	bhi.w	80039d6 <setvbuf+0x15e>
 80038a2:	2d00      	cmp	r5, #0
 80038a4:	f2c0 8097 	blt.w	80039d6 <setvbuf+0x15e>
 80038a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038aa:	07d9      	lsls	r1, r3, #31
 80038ac:	d405      	bmi.n	80038ba <setvbuf+0x42>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	059a      	lsls	r2, r3, #22
 80038b2:	d402      	bmi.n	80038ba <setvbuf+0x42>
 80038b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038b6:	f000 f9e4 	bl	8003c82 <__retarget_lock_acquire_recursive>
 80038ba:	4621      	mov	r1, r4
 80038bc:	4638      	mov	r0, r7
 80038be:	f000 fe33 	bl	8004528 <_fflush_r>
 80038c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038c4:	b141      	cbz	r1, 80038d8 <setvbuf+0x60>
 80038c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ca:	4299      	cmp	r1, r3
 80038cc:	d002      	beq.n	80038d4 <setvbuf+0x5c>
 80038ce:	4638      	mov	r0, r7
 80038d0:	f000 f9da 	bl	8003c88 <_free_r>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80038d8:	2300      	movs	r3, #0
 80038da:	61a3      	str	r3, [r4, #24]
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	d503      	bpl.n	80038ec <setvbuf+0x74>
 80038e4:	4638      	mov	r0, r7
 80038e6:	6921      	ldr	r1, [r4, #16]
 80038e8:	f000 f9ce 	bl	8003c88 <_free_r>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	f1b8 0f02 	cmp.w	r8, #2
 80038f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	d061      	beq.n	80039c2 <setvbuf+0x14a>
 80038fe:	ab01      	add	r3, sp, #4
 8003900:	466a      	mov	r2, sp
 8003902:	4621      	mov	r1, r4
 8003904:	4638      	mov	r0, r7
 8003906:	f000 fe37 	bl	8004578 <__swhatbuf_r>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	4318      	orrs	r0, r3
 800390e:	81a0      	strh	r0, [r4, #12]
 8003910:	bb2d      	cbnz	r5, 800395e <setvbuf+0xe6>
 8003912:	9d00      	ldr	r5, [sp, #0]
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f9ff 	bl	8003d18 <malloc>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d152      	bne.n	80039c6 <setvbuf+0x14e>
 8003920:	f8dd 9000 	ldr.w	r9, [sp]
 8003924:	45a9      	cmp	r9, r5
 8003926:	d140      	bne.n	80039aa <setvbuf+0x132>
 8003928:	f04f 35ff 	mov.w	r5, #4294967295
 800392c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	81a2      	strh	r2, [r4, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	60a2      	str	r2, [r4, #8]
 800393a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800393e:	6022      	str	r2, [r4, #0]
 8003940:	6122      	str	r2, [r4, #16]
 8003942:	2201      	movs	r2, #1
 8003944:	6162      	str	r2, [r4, #20]
 8003946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003948:	07d6      	lsls	r6, r2, #31
 800394a:	d404      	bmi.n	8003956 <setvbuf+0xde>
 800394c:	0598      	lsls	r0, r3, #22
 800394e:	d402      	bmi.n	8003956 <setvbuf+0xde>
 8003950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003952:	f000 f997 	bl	8003c84 <__retarget_lock_release_recursive>
 8003956:	4628      	mov	r0, r5
 8003958:	b003      	add	sp, #12
 800395a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800395e:	2e00      	cmp	r6, #0
 8003960:	d0d8      	beq.n	8003914 <setvbuf+0x9c>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	b913      	cbnz	r3, 800396c <setvbuf+0xf4>
 8003966:	4638      	mov	r0, r7
 8003968:	f7ff fee0 	bl	800372c <__sinit>
 800396c:	f1b8 0f01 	cmp.w	r8, #1
 8003970:	bf08      	it	eq
 8003972:	89a3      	ldrheq	r3, [r4, #12]
 8003974:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003978:	bf04      	itt	eq
 800397a:	f043 0301 	orreq.w	r3, r3, #1
 800397e:	81a3      	strheq	r3, [r4, #12]
 8003980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003984:	6026      	str	r6, [r4, #0]
 8003986:	f013 0208 	ands.w	r2, r3, #8
 800398a:	d01e      	beq.n	80039ca <setvbuf+0x152>
 800398c:	07d9      	lsls	r1, r3, #31
 800398e:	bf41      	itttt	mi
 8003990:	2200      	movmi	r2, #0
 8003992:	426d      	negmi	r5, r5
 8003994:	60a2      	strmi	r2, [r4, #8]
 8003996:	61a5      	strmi	r5, [r4, #24]
 8003998:	bf58      	it	pl
 800399a:	60a5      	strpl	r5, [r4, #8]
 800399c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800399e:	07d2      	lsls	r2, r2, #31
 80039a0:	d401      	bmi.n	80039a6 <setvbuf+0x12e>
 80039a2:	059b      	lsls	r3, r3, #22
 80039a4:	d513      	bpl.n	80039ce <setvbuf+0x156>
 80039a6:	2500      	movs	r5, #0
 80039a8:	e7d5      	b.n	8003956 <setvbuf+0xde>
 80039aa:	4648      	mov	r0, r9
 80039ac:	f000 f9b4 	bl	8003d18 <malloc>
 80039b0:	4606      	mov	r6, r0
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d0b8      	beq.n	8003928 <setvbuf+0xb0>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	464d      	mov	r5, r9
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	81a3      	strh	r3, [r4, #12]
 80039c0:	e7cf      	b.n	8003962 <setvbuf+0xea>
 80039c2:	2500      	movs	r5, #0
 80039c4:	e7b2      	b.n	800392c <setvbuf+0xb4>
 80039c6:	46a9      	mov	r9, r5
 80039c8:	e7f5      	b.n	80039b6 <setvbuf+0x13e>
 80039ca:	60a2      	str	r2, [r4, #8]
 80039cc:	e7e6      	b.n	800399c <setvbuf+0x124>
 80039ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039d0:	f000 f958 	bl	8003c84 <__retarget_lock_release_recursive>
 80039d4:	e7e7      	b.n	80039a6 <setvbuf+0x12e>
 80039d6:	f04f 35ff 	mov.w	r5, #4294967295
 80039da:	e7bc      	b.n	8003956 <setvbuf+0xde>
 80039dc:	20000018 	.word	0x20000018

080039e0 <__sread>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	460c      	mov	r4, r1
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	f000 f8fc 	bl	8003be4 <_read_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	bfab      	itete	ge
 80039f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039f2:	89a3      	ldrhlt	r3, [r4, #12]
 80039f4:	181b      	addge	r3, r3, r0
 80039f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039fa:	bfac      	ite	ge
 80039fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039fe:	81a3      	strhlt	r3, [r4, #12]
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <__swrite>:
 8003a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	461f      	mov	r7, r3
 8003a08:	898b      	ldrh	r3, [r1, #12]
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	05db      	lsls	r3, r3, #23
 8003a0e:	460c      	mov	r4, r1
 8003a10:	4616      	mov	r6, r2
 8003a12:	d505      	bpl.n	8003a20 <__swrite+0x1e>
 8003a14:	2302      	movs	r3, #2
 8003a16:	2200      	movs	r2, #0
 8003a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1c:	f000 f8d0 	bl	8003bc0 <_lseek_r>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	4632      	mov	r2, r6
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a36:	f000 b8e7 	b.w	8003c08 <_write_r>

08003a3a <__sseek>:
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a42:	f000 f8bd 	bl	8003bc0 <_lseek_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	bf15      	itete	ne
 8003a4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a56:	81a3      	strheq	r3, [r4, #12]
 8003a58:	bf18      	it	ne
 8003a5a:	81a3      	strhne	r3, [r4, #12]
 8003a5c:	bd10      	pop	{r4, pc}

08003a5e <__sclose>:
 8003a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a62:	f000 b89d 	b.w	8003ba0 <_close_r>

08003a66 <__swbuf_r>:
 8003a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a68:	460e      	mov	r6, r1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	b118      	cbz	r0, 8003a78 <__swbuf_r+0x12>
 8003a70:	6a03      	ldr	r3, [r0, #32]
 8003a72:	b90b      	cbnz	r3, 8003a78 <__swbuf_r+0x12>
 8003a74:	f7ff fe5a 	bl	800372c <__sinit>
 8003a78:	69a3      	ldr	r3, [r4, #24]
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	071a      	lsls	r2, r3, #28
 8003a80:	d501      	bpl.n	8003a86 <__swbuf_r+0x20>
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	b943      	cbnz	r3, 8003a98 <__swbuf_r+0x32>
 8003a86:	4621      	mov	r1, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 f82b 	bl	8003ae4 <__swsetup_r>
 8003a8e:	b118      	cbz	r0, 8003a98 <__swbuf_r+0x32>
 8003a90:	f04f 37ff 	mov.w	r7, #4294967295
 8003a94:	4638      	mov	r0, r7
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	6922      	ldr	r2, [r4, #16]
 8003a9c:	b2f6      	uxtb	r6, r6
 8003a9e:	1a98      	subs	r0, r3, r2
 8003aa0:	6963      	ldr	r3, [r4, #20]
 8003aa2:	4637      	mov	r7, r6
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	dc05      	bgt.n	8003ab4 <__swbuf_r+0x4e>
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fd3c 	bl	8004528 <_fflush_r>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d1ed      	bne.n	8003a90 <__swbuf_r+0x2a>
 8003ab4:	68a3      	ldr	r3, [r4, #8]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	6022      	str	r2, [r4, #0]
 8003ac0:	701e      	strb	r6, [r3, #0]
 8003ac2:	6962      	ldr	r2, [r4, #20]
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d004      	beq.n	8003ad4 <__swbuf_r+0x6e>
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	07db      	lsls	r3, r3, #31
 8003ace:	d5e1      	bpl.n	8003a94 <__swbuf_r+0x2e>
 8003ad0:	2e0a      	cmp	r6, #10
 8003ad2:	d1df      	bne.n	8003a94 <__swbuf_r+0x2e>
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f000 fd26 	bl	8004528 <_fflush_r>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0d9      	beq.n	8003a94 <__swbuf_r+0x2e>
 8003ae0:	e7d6      	b.n	8003a90 <__swbuf_r+0x2a>
	...

08003ae4 <__swsetup_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <__swsetup_r+0xa8>)
 8003ae8:	4605      	mov	r5, r0
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	460c      	mov	r4, r1
 8003aee:	b118      	cbz	r0, 8003af8 <__swsetup_r+0x14>
 8003af0:	6a03      	ldr	r3, [r0, #32]
 8003af2:	b90b      	cbnz	r3, 8003af8 <__swsetup_r+0x14>
 8003af4:	f7ff fe1a 	bl	800372c <__sinit>
 8003af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afc:	0719      	lsls	r1, r3, #28
 8003afe:	d422      	bmi.n	8003b46 <__swsetup_r+0x62>
 8003b00:	06da      	lsls	r2, r3, #27
 8003b02:	d407      	bmi.n	8003b14 <__swsetup_r+0x30>
 8003b04:	2209      	movs	r2, #9
 8003b06:	602a      	str	r2, [r5, #0]
 8003b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	e033      	b.n	8003b7c <__swsetup_r+0x98>
 8003b14:	0758      	lsls	r0, r3, #29
 8003b16:	d512      	bpl.n	8003b3e <__swsetup_r+0x5a>
 8003b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b1a:	b141      	cbz	r1, 8003b2e <__swsetup_r+0x4a>
 8003b1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b20:	4299      	cmp	r1, r3
 8003b22:	d002      	beq.n	8003b2a <__swsetup_r+0x46>
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 f8af 	bl	8003c88 <_free_r>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	2300      	movs	r3, #0
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f043 0308 	orr.w	r3, r3, #8
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	b94b      	cbnz	r3, 8003b5e <__swsetup_r+0x7a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d003      	beq.n	8003b5e <__swsetup_r+0x7a>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f000 fd32 	bl	80045c2 <__smakebuf_r>
 8003b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b62:	f013 0201 	ands.w	r2, r3, #1
 8003b66:	d00a      	beq.n	8003b7e <__swsetup_r+0x9a>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60a2      	str	r2, [r4, #8]
 8003b6c:	6962      	ldr	r2, [r4, #20]
 8003b6e:	4252      	negs	r2, r2
 8003b70:	61a2      	str	r2, [r4, #24]
 8003b72:	6922      	ldr	r2, [r4, #16]
 8003b74:	b942      	cbnz	r2, 8003b88 <__swsetup_r+0xa4>
 8003b76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b7a:	d1c5      	bne.n	8003b08 <__swsetup_r+0x24>
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	0799      	lsls	r1, r3, #30
 8003b80:	bf58      	it	pl
 8003b82:	6962      	ldrpl	r2, [r4, #20]
 8003b84:	60a2      	str	r2, [r4, #8]
 8003b86:	e7f4      	b.n	8003b72 <__swsetup_r+0x8e>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e7f7      	b.n	8003b7c <__swsetup_r+0x98>
 8003b8c:	20000018 	.word	0x20000018

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <_close_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4d05      	ldr	r5, [pc, #20]	@ (8003bbc <_close_r+0x1c>)
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	602b      	str	r3, [r5, #0]
 8003bac:	f7fc fd0b 	bl	80005c6 <_close>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_close_r+0x1a>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_close_r+0x1a>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	200002d0 	.word	0x200002d0

08003bc0 <_lseek_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4d05      	ldr	r5, [pc, #20]	@ (8003be0 <_lseek_r+0x20>)
 8003bcc:	602a      	str	r2, [r5, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f7fc fd1d 	bl	800060e <_lseek>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_lseek_r+0x1e>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_lseek_r+0x1e>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	200002d0 	.word	0x200002d0

08003be4 <_read_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	4d05      	ldr	r5, [pc, #20]	@ (8003c04 <_read_r+0x20>)
 8003bf0:	602a      	str	r2, [r5, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fc fcae 	bl	8000554 <_read>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_read_r+0x1e>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_read_r+0x1e>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	200002d0 	.word	0x200002d0

08003c08 <_write_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	2200      	movs	r2, #0
 8003c12:	4d05      	ldr	r5, [pc, #20]	@ (8003c28 <_write_r+0x20>)
 8003c14:	602a      	str	r2, [r5, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f7fc fcb9 	bl	800058e <_write>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_write_r+0x1e>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_write_r+0x1e>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	200002d0 	.word	0x200002d0

08003c2c <__errno>:
 8003c2c:	4b01      	ldr	r3, [pc, #4]	@ (8003c34 <__errno+0x8>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000018 	.word	0x20000018

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	4d0c      	ldr	r5, [pc, #48]	@ (8003c70 <__libc_init_array+0x38>)
 8003c3e:	4c0d      	ldr	r4, [pc, #52]	@ (8003c74 <__libc_init_array+0x3c>)
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	f000 fd38 	bl	80046bc <_init>
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	4d0a      	ldr	r5, [pc, #40]	@ (8003c78 <__libc_init_array+0x40>)
 8003c50:	4c0a      	ldr	r4, [pc, #40]	@ (8003c7c <__libc_init_array+0x44>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	42a6      	cmp	r6, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c60:	4798      	blx	r3
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6a:	4798      	blx	r3
 8003c6c:	3601      	adds	r6, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	08004998 	.word	0x08004998
 8003c74:	08004998 	.word	0x08004998
 8003c78:	08004998 	.word	0x08004998
 8003c7c:	0800499c 	.word	0x0800499c

08003c80 <__retarget_lock_init_recursive>:
 8003c80:	4770      	bx	lr

08003c82 <__retarget_lock_acquire_recursive>:
 8003c82:	4770      	bx	lr

08003c84 <__retarget_lock_release_recursive>:
 8003c84:	4770      	bx	lr
	...

08003c88 <_free_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	2900      	cmp	r1, #0
 8003c8e:	d040      	beq.n	8003d12 <_free_r+0x8a>
 8003c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c94:	1f0c      	subs	r4, r1, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfb8      	it	lt
 8003c9a:	18e4      	addlt	r4, r4, r3
 8003c9c:	f000 f8e6 	bl	8003e6c <__malloc_lock>
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d14 <_free_r+0x8c>)
 8003ca2:	6813      	ldr	r3, [r2, #0]
 8003ca4:	b933      	cbnz	r3, 8003cb4 <_free_r+0x2c>
 8003ca6:	6063      	str	r3, [r4, #4]
 8003ca8:	6014      	str	r4, [r2, #0]
 8003caa:	4628      	mov	r0, r5
 8003cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb0:	f000 b8e2 	b.w	8003e78 <__malloc_unlock>
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d908      	bls.n	8003cca <_free_r+0x42>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	1821      	adds	r1, r4, r0
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	bf01      	itttt	eq
 8003cc0:	6819      	ldreq	r1, [r3, #0]
 8003cc2:	685b      	ldreq	r3, [r3, #4]
 8003cc4:	1809      	addeq	r1, r1, r0
 8003cc6:	6021      	streq	r1, [r4, #0]
 8003cc8:	e7ed      	b.n	8003ca6 <_free_r+0x1e>
 8003cca:	461a      	mov	r2, r3
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	b10b      	cbz	r3, 8003cd4 <_free_r+0x4c>
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d9fa      	bls.n	8003cca <_free_r+0x42>
 8003cd4:	6811      	ldr	r1, [r2, #0]
 8003cd6:	1850      	adds	r0, r2, r1
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d10b      	bne.n	8003cf4 <_free_r+0x6c>
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	4401      	add	r1, r0
 8003ce0:	1850      	adds	r0, r2, r1
 8003ce2:	4283      	cmp	r3, r0
 8003ce4:	6011      	str	r1, [r2, #0]
 8003ce6:	d1e0      	bne.n	8003caa <_free_r+0x22>
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4408      	add	r0, r1
 8003cee:	6010      	str	r0, [r2, #0]
 8003cf0:	6053      	str	r3, [r2, #4]
 8003cf2:	e7da      	b.n	8003caa <_free_r+0x22>
 8003cf4:	d902      	bls.n	8003cfc <_free_r+0x74>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	e7d6      	b.n	8003caa <_free_r+0x22>
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	1821      	adds	r1, r4, r0
 8003d00:	428b      	cmp	r3, r1
 8003d02:	bf01      	itttt	eq
 8003d04:	6819      	ldreq	r1, [r3, #0]
 8003d06:	685b      	ldreq	r3, [r3, #4]
 8003d08:	1809      	addeq	r1, r1, r0
 8003d0a:	6021      	streq	r1, [r4, #0]
 8003d0c:	6063      	str	r3, [r4, #4]
 8003d0e:	6054      	str	r4, [r2, #4]
 8003d10:	e7cb      	b.n	8003caa <_free_r+0x22>
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	200002dc 	.word	0x200002dc

08003d18 <malloc>:
 8003d18:	4b02      	ldr	r3, [pc, #8]	@ (8003d24 <malloc+0xc>)
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f000 b825 	b.w	8003d6c <_malloc_r>
 8003d22:	bf00      	nop
 8003d24:	20000018 	.word	0x20000018

08003d28 <sbrk_aligned>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d68 <sbrk_aligned+0x40>)
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	6831      	ldr	r1, [r6, #0]
 8003d30:	4605      	mov	r5, r0
 8003d32:	b911      	cbnz	r1, 8003d3a <sbrk_aligned+0x12>
 8003d34:	f000 fca4 	bl	8004680 <_sbrk_r>
 8003d38:	6030      	str	r0, [r6, #0]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	f000 fc9f 	bl	8004680 <_sbrk_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	d103      	bne.n	8003d4e <sbrk_aligned+0x26>
 8003d46:	f04f 34ff 	mov.w	r4, #4294967295
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	1cc4      	adds	r4, r0, #3
 8003d50:	f024 0403 	bic.w	r4, r4, #3
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d0f8      	beq.n	8003d4a <sbrk_aligned+0x22>
 8003d58:	1a21      	subs	r1, r4, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 fc90 	bl	8004680 <_sbrk_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d1f2      	bne.n	8003d4a <sbrk_aligned+0x22>
 8003d64:	e7ef      	b.n	8003d46 <sbrk_aligned+0x1e>
 8003d66:	bf00      	nop
 8003d68:	200002d8 	.word	0x200002d8

08003d6c <_malloc_r>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	1ccd      	adds	r5, r1, #3
 8003d72:	f025 0503 	bic.w	r5, r5, #3
 8003d76:	3508      	adds	r5, #8
 8003d78:	2d0c      	cmp	r5, #12
 8003d7a:	bf38      	it	cc
 8003d7c:	250c      	movcc	r5, #12
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	4606      	mov	r6, r0
 8003d82:	db01      	blt.n	8003d88 <_malloc_r+0x1c>
 8003d84:	42a9      	cmp	r1, r5
 8003d86:	d904      	bls.n	8003d92 <_malloc_r+0x26>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e68 <_malloc_r+0xfc>
 8003d96:	f000 f869 	bl	8003e6c <__malloc_lock>
 8003d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d9e:	461c      	mov	r4, r3
 8003da0:	bb44      	cbnz	r4, 8003df4 <_malloc_r+0x88>
 8003da2:	4629      	mov	r1, r5
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff ffbf 	bl	8003d28 <sbrk_aligned>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	4604      	mov	r4, r0
 8003dae:	d158      	bne.n	8003e62 <_malloc_r+0xf6>
 8003db0:	f8d8 4000 	ldr.w	r4, [r8]
 8003db4:	4627      	mov	r7, r4
 8003db6:	2f00      	cmp	r7, #0
 8003db8:	d143      	bne.n	8003e42 <_malloc_r+0xd6>
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d04b      	beq.n	8003e56 <_malloc_r+0xea>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	eb04 0903 	add.w	r9, r4, r3
 8003dc8:	f000 fc5a 	bl	8004680 <_sbrk_r>
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	d142      	bne.n	8003e56 <_malloc_r+0xea>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	1a6d      	subs	r5, r5, r1
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f7ff ffa6 	bl	8003d28 <sbrk_aligned>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d03a      	beq.n	8003e56 <_malloc_r+0xea>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	442b      	add	r3, r5
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	bb62      	cbnz	r2, 8003e48 <_malloc_r+0xdc>
 8003dee:	f8c8 7000 	str.w	r7, [r8]
 8003df2:	e00f      	b.n	8003e14 <_malloc_r+0xa8>
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	1b52      	subs	r2, r2, r5
 8003df8:	d420      	bmi.n	8003e3c <_malloc_r+0xd0>
 8003dfa:	2a0b      	cmp	r2, #11
 8003dfc:	d917      	bls.n	8003e2e <_malloc_r+0xc2>
 8003dfe:	1961      	adds	r1, r4, r5
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	6025      	str	r5, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	6059      	strne	r1, [r3, #4]
 8003e08:	6863      	ldr	r3, [r4, #4]
 8003e0a:	bf08      	it	eq
 8003e0c:	f8c8 1000 	streq.w	r1, [r8]
 8003e10:	5162      	str	r2, [r4, r5]
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f82f 	bl	8003e78 <__malloc_unlock>
 8003e1a:	f104 000b 	add.w	r0, r4, #11
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	f020 0007 	bic.w	r0, r0, #7
 8003e24:	1ac2      	subs	r2, r0, r3
 8003e26:	bf1c      	itt	ne
 8003e28:	1a1b      	subne	r3, r3, r0
 8003e2a:	50a3      	strne	r3, [r4, r2]
 8003e2c:	e7af      	b.n	8003d8e <_malloc_r+0x22>
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	bf0c      	ite	eq
 8003e34:	f8c8 2000 	streq.w	r2, [r8]
 8003e38:	605a      	strne	r2, [r3, #4]
 8003e3a:	e7eb      	b.n	8003e14 <_malloc_r+0xa8>
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	6864      	ldr	r4, [r4, #4]
 8003e40:	e7ae      	b.n	8003da0 <_malloc_r+0x34>
 8003e42:	463c      	mov	r4, r7
 8003e44:	687f      	ldr	r7, [r7, #4]
 8003e46:	e7b6      	b.n	8003db6 <_malloc_r+0x4a>
 8003e48:	461a      	mov	r2, r3
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d1fb      	bne.n	8003e48 <_malloc_r+0xdc>
 8003e50:	2300      	movs	r3, #0
 8003e52:	6053      	str	r3, [r2, #4]
 8003e54:	e7de      	b.n	8003e14 <_malloc_r+0xa8>
 8003e56:	230c      	movs	r3, #12
 8003e58:	4630      	mov	r0, r6
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	f000 f80c 	bl	8003e78 <__malloc_unlock>
 8003e60:	e794      	b.n	8003d8c <_malloc_r+0x20>
 8003e62:	6005      	str	r5, [r0, #0]
 8003e64:	e7d6      	b.n	8003e14 <_malloc_r+0xa8>
 8003e66:	bf00      	nop
 8003e68:	200002dc 	.word	0x200002dc

08003e6c <__malloc_lock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__malloc_lock+0x8>)
 8003e6e:	f7ff bf08 	b.w	8003c82 <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	200002d4 	.word	0x200002d4

08003e78 <__malloc_unlock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__malloc_unlock+0x8>)
 8003e7a:	f7ff bf03 	b.w	8003c84 <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	200002d4 	.word	0x200002d4

08003e84 <__sfputc_r>:
 8003e84:	6893      	ldr	r3, [r2, #8]
 8003e86:	b410      	push	{r4}
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	da07      	bge.n	8003ea0 <__sfputc_r+0x1c>
 8003e90:	6994      	ldr	r4, [r2, #24]
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	db01      	blt.n	8003e9a <__sfputc_r+0x16>
 8003e96:	290a      	cmp	r1, #10
 8003e98:	d102      	bne.n	8003ea0 <__sfputc_r+0x1c>
 8003e9a:	bc10      	pop	{r4}
 8003e9c:	f7ff bde3 	b.w	8003a66 <__swbuf_r>
 8003ea0:	6813      	ldr	r3, [r2, #0]
 8003ea2:	1c58      	adds	r0, r3, #1
 8003ea4:	6010      	str	r0, [r2, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	bc10      	pop	{r4}
 8003eac:	4770      	bx	lr

08003eae <__sfputs_r>:
 8003eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	460f      	mov	r7, r1
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	18d5      	adds	r5, r2, r3
 8003eb8:	42ac      	cmp	r4, r5
 8003eba:	d101      	bne.n	8003ec0 <__sfputs_r+0x12>
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e007      	b.n	8003ed0 <__sfputs_r+0x22>
 8003ec0:	463a      	mov	r2, r7
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec8:	f7ff ffdc 	bl	8003e84 <__sfputc_r>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d1f3      	bne.n	8003eb8 <__sfputs_r+0xa>
 8003ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ed4 <_vfiprintf_r>:
 8003ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed8:	460d      	mov	r5, r1
 8003eda:	4614      	mov	r4, r2
 8003edc:	4698      	mov	r8, r3
 8003ede:	4606      	mov	r6, r0
 8003ee0:	b09d      	sub	sp, #116	@ 0x74
 8003ee2:	b118      	cbz	r0, 8003eec <_vfiprintf_r+0x18>
 8003ee4:	6a03      	ldr	r3, [r0, #32]
 8003ee6:	b90b      	cbnz	r3, 8003eec <_vfiprintf_r+0x18>
 8003ee8:	f7ff fc20 	bl	800372c <__sinit>
 8003eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003eee:	07d9      	lsls	r1, r3, #31
 8003ef0:	d405      	bmi.n	8003efe <_vfiprintf_r+0x2a>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	059a      	lsls	r2, r3, #22
 8003ef6:	d402      	bmi.n	8003efe <_vfiprintf_r+0x2a>
 8003ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003efa:	f7ff fec2 	bl	8003c82 <__retarget_lock_acquire_recursive>
 8003efe:	89ab      	ldrh	r3, [r5, #12]
 8003f00:	071b      	lsls	r3, r3, #28
 8003f02:	d501      	bpl.n	8003f08 <_vfiprintf_r+0x34>
 8003f04:	692b      	ldr	r3, [r5, #16]
 8003f06:	b99b      	cbnz	r3, 8003f30 <_vfiprintf_r+0x5c>
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff fdea 	bl	8003ae4 <__swsetup_r>
 8003f10:	b170      	cbz	r0, 8003f30 <_vfiprintf_r+0x5c>
 8003f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f14:	07dc      	lsls	r4, r3, #31
 8003f16:	d504      	bpl.n	8003f22 <_vfiprintf_r+0x4e>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	b01d      	add	sp, #116	@ 0x74
 8003f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	0598      	lsls	r0, r3, #22
 8003f26:	d4f7      	bmi.n	8003f18 <_vfiprintf_r+0x44>
 8003f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f2a:	f7ff feab 	bl	8003c84 <__retarget_lock_release_recursive>
 8003f2e:	e7f3      	b.n	8003f18 <_vfiprintf_r+0x44>
 8003f30:	2300      	movs	r3, #0
 8003f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f34:	2320      	movs	r3, #32
 8003f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f3a:	2330      	movs	r3, #48	@ 0x30
 8003f3c:	f04f 0901 	mov.w	r9, #1
 8003f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80040f0 <_vfiprintf_r+0x21c>
 8003f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	469a      	mov	sl, r3
 8003f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f54:	b10a      	cbz	r2, 8003f5a <_vfiprintf_r+0x86>
 8003f56:	2a25      	cmp	r2, #37	@ 0x25
 8003f58:	d1f9      	bne.n	8003f4e <_vfiprintf_r+0x7a>
 8003f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5e:	d00b      	beq.n	8003f78 <_vfiprintf_r+0xa4>
 8003f60:	465b      	mov	r3, fp
 8003f62:	4622      	mov	r2, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	4630      	mov	r0, r6
 8003f68:	f7ff ffa1 	bl	8003eae <__sfputs_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	f000 80a7 	beq.w	80040c0 <_vfiprintf_r+0x1ec>
 8003f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f74:	445a      	add	r2, fp
 8003f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f78:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 809f 	beq.w	80040c0 <_vfiprintf_r+0x1ec>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f8c:	f10a 0a01 	add.w	sl, sl, #1
 8003f90:	9304      	str	r3, [sp, #16]
 8003f92:	9307      	str	r3, [sp, #28]
 8003f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f9a:	4654      	mov	r4, sl
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa2:	4853      	ldr	r0, [pc, #332]	@ (80040f0 <_vfiprintf_r+0x21c>)
 8003fa4:	f000 fb7c 	bl	80046a0 <memchr>
 8003fa8:	9a04      	ldr	r2, [sp, #16]
 8003faa:	b9d8      	cbnz	r0, 8003fe4 <_vfiprintf_r+0x110>
 8003fac:	06d1      	lsls	r1, r2, #27
 8003fae:	bf44      	itt	mi
 8003fb0:	2320      	movmi	r3, #32
 8003fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fb6:	0713      	lsls	r3, r2, #28
 8003fb8:	bf44      	itt	mi
 8003fba:	232b      	movmi	r3, #43	@ 0x2b
 8003fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc6:	d015      	beq.n	8003ff4 <_vfiprintf_r+0x120>
 8003fc8:	4654      	mov	r4, sl
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f04f 0c0a 	mov.w	ip, #10
 8003fd0:	9a07      	ldr	r2, [sp, #28]
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd8:	3b30      	subs	r3, #48	@ 0x30
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	d94b      	bls.n	8004076 <_vfiprintf_r+0x1a2>
 8003fde:	b1b0      	cbz	r0, 800400e <_vfiprintf_r+0x13a>
 8003fe0:	9207      	str	r2, [sp, #28]
 8003fe2:	e014      	b.n	800400e <_vfiprintf_r+0x13a>
 8003fe4:	eba0 0308 	sub.w	r3, r0, r8
 8003fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fec:	4313      	orrs	r3, r2
 8003fee:	46a2      	mov	sl, r4
 8003ff0:	9304      	str	r3, [sp, #16]
 8003ff2:	e7d2      	b.n	8003f9a <_vfiprintf_r+0xc6>
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	1d19      	adds	r1, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	9103      	str	r1, [sp, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bfbb      	ittet	lt
 8004000:	425b      	neglt	r3, r3
 8004002:	f042 0202 	orrlt.w	r2, r2, #2
 8004006:	9307      	strge	r3, [sp, #28]
 8004008:	9307      	strlt	r3, [sp, #28]
 800400a:	bfb8      	it	lt
 800400c:	9204      	strlt	r2, [sp, #16]
 800400e:	7823      	ldrb	r3, [r4, #0]
 8004010:	2b2e      	cmp	r3, #46	@ 0x2e
 8004012:	d10a      	bne.n	800402a <_vfiprintf_r+0x156>
 8004014:	7863      	ldrb	r3, [r4, #1]
 8004016:	2b2a      	cmp	r3, #42	@ 0x2a
 8004018:	d132      	bne.n	8004080 <_vfiprintf_r+0x1ac>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	3402      	adds	r4, #2
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	9203      	str	r2, [sp, #12]
 8004024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80040f4 <_vfiprintf_r+0x220>
 800402e:	2203      	movs	r2, #3
 8004030:	4650      	mov	r0, sl
 8004032:	7821      	ldrb	r1, [r4, #0]
 8004034:	f000 fb34 	bl	80046a0 <memchr>
 8004038:	b138      	cbz	r0, 800404a <_vfiprintf_r+0x176>
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	eba0 000a 	sub.w	r0, r0, sl
 8004042:	4082      	lsls	r2, r0
 8004044:	4313      	orrs	r3, r2
 8004046:	3401      	adds	r4, #1
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404e:	2206      	movs	r2, #6
 8004050:	4829      	ldr	r0, [pc, #164]	@ (80040f8 <_vfiprintf_r+0x224>)
 8004052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004056:	f000 fb23 	bl	80046a0 <memchr>
 800405a:	2800      	cmp	r0, #0
 800405c:	d03f      	beq.n	80040de <_vfiprintf_r+0x20a>
 800405e:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <_vfiprintf_r+0x228>)
 8004060:	bb1b      	cbnz	r3, 80040aa <_vfiprintf_r+0x1d6>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	3307      	adds	r3, #7
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	3308      	adds	r3, #8
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004070:	443b      	add	r3, r7
 8004072:	9309      	str	r3, [sp, #36]	@ 0x24
 8004074:	e76a      	b.n	8003f4c <_vfiprintf_r+0x78>
 8004076:	460c      	mov	r4, r1
 8004078:	2001      	movs	r0, #1
 800407a:	fb0c 3202 	mla	r2, ip, r2, r3
 800407e:	e7a8      	b.n	8003fd2 <_vfiprintf_r+0xfe>
 8004080:	2300      	movs	r3, #0
 8004082:	f04f 0c0a 	mov.w	ip, #10
 8004086:	4619      	mov	r1, r3
 8004088:	3401      	adds	r4, #1
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	4620      	mov	r0, r4
 800408e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004092:	3a30      	subs	r2, #48	@ 0x30
 8004094:	2a09      	cmp	r2, #9
 8004096:	d903      	bls.n	80040a0 <_vfiprintf_r+0x1cc>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0c6      	beq.n	800402a <_vfiprintf_r+0x156>
 800409c:	9105      	str	r1, [sp, #20]
 800409e:	e7c4      	b.n	800402a <_vfiprintf_r+0x156>
 80040a0:	4604      	mov	r4, r0
 80040a2:	2301      	movs	r3, #1
 80040a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a8:	e7f0      	b.n	800408c <_vfiprintf_r+0x1b8>
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4630      	mov	r0, r6
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <_vfiprintf_r+0x22c>)
 80040b4:	a904      	add	r1, sp, #16
 80040b6:	f3af 8000 	nop.w
 80040ba:	4607      	mov	r7, r0
 80040bc:	1c78      	adds	r0, r7, #1
 80040be:	d1d6      	bne.n	800406e <_vfiprintf_r+0x19a>
 80040c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040c2:	07d9      	lsls	r1, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_vfiprintf_r+0x1fe>
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	059a      	lsls	r2, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_vfiprintf_r+0x1fe>
 80040cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ce:	f7ff fdd9 	bl	8003c84 <__retarget_lock_release_recursive>
 80040d2:	89ab      	ldrh	r3, [r5, #12]
 80040d4:	065b      	lsls	r3, r3, #25
 80040d6:	f53f af1f 	bmi.w	8003f18 <_vfiprintf_r+0x44>
 80040da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040dc:	e71e      	b.n	8003f1c <_vfiprintf_r+0x48>
 80040de:	ab03      	add	r3, sp, #12
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	462a      	mov	r2, r5
 80040e4:	4630      	mov	r0, r6
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <_vfiprintf_r+0x22c>)
 80040e8:	a904      	add	r1, sp, #16
 80040ea:	f000 f87d 	bl	80041e8 <_printf_i>
 80040ee:	e7e4      	b.n	80040ba <_vfiprintf_r+0x1e6>
 80040f0:	08004962 	.word	0x08004962
 80040f4:	08004968 	.word	0x08004968
 80040f8:	0800496c 	.word	0x0800496c
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003eaf 	.word	0x08003eaf

08004104 <_printf_common>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	4616      	mov	r6, r2
 800410a:	4698      	mov	r8, r3
 800410c:	688a      	ldr	r2, [r1, #8]
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	4607      	mov	r7, r0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfb8      	it	lt
 8004116:	4613      	movlt	r3, r2
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800411e:	460c      	mov	r4, r1
 8004120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004124:	b10a      	cbz	r2, 800412a <_printf_common+0x26>
 8004126:	3301      	adds	r3, #1
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	0699      	lsls	r1, r3, #26
 800412e:	bf42      	ittt	mi
 8004130:	6833      	ldrmi	r3, [r6, #0]
 8004132:	3302      	addmi	r3, #2
 8004134:	6033      	strmi	r3, [r6, #0]
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	f015 0506 	ands.w	r5, r5, #6
 800413c:	d106      	bne.n	800414c <_printf_common+0x48>
 800413e:	f104 0a19 	add.w	sl, r4, #25
 8004142:	68e3      	ldr	r3, [r4, #12]
 8004144:	6832      	ldr	r2, [r6, #0]
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	42ab      	cmp	r3, r5
 800414a:	dc2b      	bgt.n	80041a4 <_printf_common+0xa0>
 800414c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	3b00      	subs	r3, #0
 8004154:	bf18      	it	ne
 8004156:	2301      	movne	r3, #1
 8004158:	0692      	lsls	r2, r2, #26
 800415a:	d430      	bmi.n	80041be <_printf_common+0xba>
 800415c:	4641      	mov	r1, r8
 800415e:	4638      	mov	r0, r7
 8004160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004164:	47c8      	blx	r9
 8004166:	3001      	adds	r0, #1
 8004168:	d023      	beq.n	80041b2 <_printf_common+0xae>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6922      	ldr	r2, [r4, #16]
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	2b04      	cmp	r3, #4
 8004174:	bf14      	ite	ne
 8004176:	2500      	movne	r5, #0
 8004178:	6833      	ldreq	r3, [r6, #0]
 800417a:	f04f 0600 	mov.w	r6, #0
 800417e:	bf08      	it	eq
 8004180:	68e5      	ldreq	r5, [r4, #12]
 8004182:	f104 041a 	add.w	r4, r4, #26
 8004186:	bf08      	it	eq
 8004188:	1aed      	subeq	r5, r5, r3
 800418a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800418e:	bf08      	it	eq
 8004190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004194:	4293      	cmp	r3, r2
 8004196:	bfc4      	itt	gt
 8004198:	1a9b      	subgt	r3, r3, r2
 800419a:	18ed      	addgt	r5, r5, r3
 800419c:	42b5      	cmp	r5, r6
 800419e:	d11a      	bne.n	80041d6 <_printf_common+0xd2>
 80041a0:	2000      	movs	r0, #0
 80041a2:	e008      	b.n	80041b6 <_printf_common+0xb2>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4652      	mov	r2, sl
 80041a8:	4641      	mov	r1, r8
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c8      	blx	r9
 80041ae:	3001      	adds	r0, #1
 80041b0:	d103      	bne.n	80041ba <_printf_common+0xb6>
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295
 80041b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ba:	3501      	adds	r5, #1
 80041bc:	e7c1      	b.n	8004142 <_printf_common+0x3e>
 80041be:	2030      	movs	r0, #48	@ 0x30
 80041c0:	18e1      	adds	r1, r4, r3
 80041c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041cc:	4422      	add	r2, r4
 80041ce:	3302      	adds	r3, #2
 80041d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041d4:	e7c2      	b.n	800415c <_printf_common+0x58>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4622      	mov	r2, r4
 80041da:	4641      	mov	r1, r8
 80041dc:	4638      	mov	r0, r7
 80041de:	47c8      	blx	r9
 80041e0:	3001      	adds	r0, #1
 80041e2:	d0e6      	beq.n	80041b2 <_printf_common+0xae>
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7d9      	b.n	800419c <_printf_common+0x98>

080041e8 <_printf_i>:
 80041e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	7e0f      	ldrb	r7, [r1, #24]
 80041ee:	4691      	mov	r9, r2
 80041f0:	2f78      	cmp	r7, #120	@ 0x78
 80041f2:	4680      	mov	r8, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	469a      	mov	sl, r3
 80041f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041fe:	d807      	bhi.n	8004210 <_printf_i+0x28>
 8004200:	2f62      	cmp	r7, #98	@ 0x62
 8004202:	d80a      	bhi.n	800421a <_printf_i+0x32>
 8004204:	2f00      	cmp	r7, #0
 8004206:	f000 80d3 	beq.w	80043b0 <_printf_i+0x1c8>
 800420a:	2f58      	cmp	r7, #88	@ 0x58
 800420c:	f000 80ba 	beq.w	8004384 <_printf_i+0x19c>
 8004210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004218:	e03a      	b.n	8004290 <_printf_i+0xa8>
 800421a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800421e:	2b15      	cmp	r3, #21
 8004220:	d8f6      	bhi.n	8004210 <_printf_i+0x28>
 8004222:	a101      	add	r1, pc, #4	@ (adr r1, 8004228 <_printf_i+0x40>)
 8004224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004228:	08004281 	.word	0x08004281
 800422c:	08004295 	.word	0x08004295
 8004230:	08004211 	.word	0x08004211
 8004234:	08004211 	.word	0x08004211
 8004238:	08004211 	.word	0x08004211
 800423c:	08004211 	.word	0x08004211
 8004240:	08004295 	.word	0x08004295
 8004244:	08004211 	.word	0x08004211
 8004248:	08004211 	.word	0x08004211
 800424c:	08004211 	.word	0x08004211
 8004250:	08004211 	.word	0x08004211
 8004254:	08004397 	.word	0x08004397
 8004258:	080042bf 	.word	0x080042bf
 800425c:	08004351 	.word	0x08004351
 8004260:	08004211 	.word	0x08004211
 8004264:	08004211 	.word	0x08004211
 8004268:	080043b9 	.word	0x080043b9
 800426c:	08004211 	.word	0x08004211
 8004270:	080042bf 	.word	0x080042bf
 8004274:	08004211 	.word	0x08004211
 8004278:	08004211 	.word	0x08004211
 800427c:	08004359 	.word	0x08004359
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6032      	str	r2, [r6, #0]
 8004288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800428c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004290:	2301      	movs	r3, #1
 8004292:	e09e      	b.n	80043d2 <_printf_i+0x1ea>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6031      	str	r1, [r6, #0]
 800429c:	0606      	lsls	r6, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xbc>
 80042a0:	681d      	ldr	r5, [r3, #0]
 80042a2:	e003      	b.n	80042ac <_printf_i+0xc4>
 80042a4:	0645      	lsls	r5, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xb8>
 80042a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	da03      	bge.n	80042b8 <_printf_i+0xd0>
 80042b0:	232d      	movs	r3, #45	@ 0x2d
 80042b2:	426d      	negs	r5, r5
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b8:	230a      	movs	r3, #10
 80042ba:	4859      	ldr	r0, [pc, #356]	@ (8004420 <_printf_i+0x238>)
 80042bc:	e011      	b.n	80042e2 <_printf_i+0xfa>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	0608      	lsls	r0, r1, #24
 80042c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042c8:	d402      	bmi.n	80042d0 <_printf_i+0xe8>
 80042ca:	0649      	lsls	r1, r1, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	bf14      	ite	ne
 80042d6:	230a      	movne	r3, #10
 80042d8:	2308      	moveq	r3, #8
 80042da:	4851      	ldr	r0, [pc, #324]	@ (8004420 <_printf_i+0x238>)
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042e2:	6866      	ldr	r6, [r4, #4]
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	bfa8      	it	ge
 80042e8:	6821      	ldrge	r1, [r4, #0]
 80042ea:	60a6      	str	r6, [r4, #8]
 80042ec:	bfa4      	itt	ge
 80042ee:	f021 0104 	bicge.w	r1, r1, #4
 80042f2:	6021      	strge	r1, [r4, #0]
 80042f4:	b90d      	cbnz	r5, 80042fa <_printf_i+0x112>
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	d04b      	beq.n	8004392 <_printf_i+0x1aa>
 80042fa:	4616      	mov	r6, r2
 80042fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004300:	fb03 5711 	mls	r7, r3, r1, r5
 8004304:	5dc7      	ldrb	r7, [r0, r7]
 8004306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800430a:	462f      	mov	r7, r5
 800430c:	42bb      	cmp	r3, r7
 800430e:	460d      	mov	r5, r1
 8004310:	d9f4      	bls.n	80042fc <_printf_i+0x114>
 8004312:	2b08      	cmp	r3, #8
 8004314:	d10b      	bne.n	800432e <_printf_i+0x146>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07df      	lsls	r7, r3, #31
 800431a:	d508      	bpl.n	800432e <_printf_i+0x146>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	4299      	cmp	r1, r3
 8004322:	bfde      	ittt	le
 8004324:	2330      	movle	r3, #48	@ 0x30
 8004326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800432a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800432e:	1b92      	subs	r2, r2, r6
 8004330:	6122      	str	r2, [r4, #16]
 8004332:	464b      	mov	r3, r9
 8004334:	4621      	mov	r1, r4
 8004336:	4640      	mov	r0, r8
 8004338:	f8cd a000 	str.w	sl, [sp]
 800433c:	aa03      	add	r2, sp, #12
 800433e:	f7ff fee1 	bl	8004104 <_printf_common>
 8004342:	3001      	adds	r0, #1
 8004344:	d14a      	bne.n	80043dc <_printf_i+0x1f4>
 8004346:	f04f 30ff 	mov.w	r0, #4294967295
 800434a:	b004      	add	sp, #16
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	2778      	movs	r7, #120	@ 0x78
 800435a:	4832      	ldr	r0, [pc, #200]	@ (8004424 <_printf_i+0x23c>)
 800435c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	6831      	ldr	r1, [r6, #0]
 8004364:	061f      	lsls	r7, r3, #24
 8004366:	f851 5b04 	ldr.w	r5, [r1], #4
 800436a:	d402      	bmi.n	8004372 <_printf_i+0x18a>
 800436c:	065f      	lsls	r7, r3, #25
 800436e:	bf48      	it	mi
 8004370:	b2ad      	uxthmi	r5, r5
 8004372:	6031      	str	r1, [r6, #0]
 8004374:	07d9      	lsls	r1, r3, #31
 8004376:	bf44      	itt	mi
 8004378:	f043 0320 	orrmi.w	r3, r3, #32
 800437c:	6023      	strmi	r3, [r4, #0]
 800437e:	b11d      	cbz	r5, 8004388 <_printf_i+0x1a0>
 8004380:	2310      	movs	r3, #16
 8004382:	e7ab      	b.n	80042dc <_printf_i+0xf4>
 8004384:	4826      	ldr	r0, [pc, #152]	@ (8004420 <_printf_i+0x238>)
 8004386:	e7e9      	b.n	800435c <_printf_i+0x174>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	e7f6      	b.n	8004380 <_printf_i+0x198>
 8004392:	4616      	mov	r6, r2
 8004394:	e7bd      	b.n	8004312 <_printf_i+0x12a>
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	6825      	ldr	r5, [r4, #0]
 800439a:	1d18      	adds	r0, r3, #4
 800439c:	6961      	ldr	r1, [r4, #20]
 800439e:	6030      	str	r0, [r6, #0]
 80043a0:	062e      	lsls	r6, r5, #24
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	d501      	bpl.n	80043aa <_printf_i+0x1c2>
 80043a6:	6019      	str	r1, [r3, #0]
 80043a8:	e002      	b.n	80043b0 <_printf_i+0x1c8>
 80043aa:	0668      	lsls	r0, r5, #25
 80043ac:	d5fb      	bpl.n	80043a6 <_printf_i+0x1be>
 80043ae:	8019      	strh	r1, [r3, #0]
 80043b0:	2300      	movs	r3, #0
 80043b2:	4616      	mov	r6, r2
 80043b4:	6123      	str	r3, [r4, #16]
 80043b6:	e7bc      	b.n	8004332 <_printf_i+0x14a>
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	2100      	movs	r1, #0
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	6032      	str	r2, [r6, #0]
 80043c0:	681e      	ldr	r6, [r3, #0]
 80043c2:	6862      	ldr	r2, [r4, #4]
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f96b 	bl	80046a0 <memchr>
 80043ca:	b108      	cbz	r0, 80043d0 <_printf_i+0x1e8>
 80043cc:	1b80      	subs	r0, r0, r6
 80043ce:	6060      	str	r0, [r4, #4]
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	6123      	str	r3, [r4, #16]
 80043d4:	2300      	movs	r3, #0
 80043d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043da:	e7aa      	b.n	8004332 <_printf_i+0x14a>
 80043dc:	4632      	mov	r2, r6
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	47d0      	blx	sl
 80043e6:	3001      	adds	r0, #1
 80043e8:	d0ad      	beq.n	8004346 <_printf_i+0x15e>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	079b      	lsls	r3, r3, #30
 80043ee:	d413      	bmi.n	8004418 <_printf_i+0x230>
 80043f0:	68e0      	ldr	r0, [r4, #12]
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	4298      	cmp	r0, r3
 80043f6:	bfb8      	it	lt
 80043f8:	4618      	movlt	r0, r3
 80043fa:	e7a6      	b.n	800434a <_printf_i+0x162>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4632      	mov	r2, r6
 8004400:	4649      	mov	r1, r9
 8004402:	4640      	mov	r0, r8
 8004404:	47d0      	blx	sl
 8004406:	3001      	adds	r0, #1
 8004408:	d09d      	beq.n	8004346 <_printf_i+0x15e>
 800440a:	3501      	adds	r5, #1
 800440c:	68e3      	ldr	r3, [r4, #12]
 800440e:	9903      	ldr	r1, [sp, #12]
 8004410:	1a5b      	subs	r3, r3, r1
 8004412:	42ab      	cmp	r3, r5
 8004414:	dcf2      	bgt.n	80043fc <_printf_i+0x214>
 8004416:	e7eb      	b.n	80043f0 <_printf_i+0x208>
 8004418:	2500      	movs	r5, #0
 800441a:	f104 0619 	add.w	r6, r4, #25
 800441e:	e7f5      	b.n	800440c <_printf_i+0x224>
 8004420:	08004973 	.word	0x08004973
 8004424:	08004984 	.word	0x08004984

08004428 <__sflush_r>:
 8004428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	0716      	lsls	r6, r2, #28
 8004430:	4605      	mov	r5, r0
 8004432:	460c      	mov	r4, r1
 8004434:	d454      	bmi.n	80044e0 <__sflush_r+0xb8>
 8004436:	684b      	ldr	r3, [r1, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc02      	bgt.n	8004442 <__sflush_r+0x1a>
 800443c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd48      	ble.n	80044d4 <__sflush_r+0xac>
 8004442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004444:	2e00      	cmp	r6, #0
 8004446:	d045      	beq.n	80044d4 <__sflush_r+0xac>
 8004448:	2300      	movs	r3, #0
 800444a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800444e:	682f      	ldr	r7, [r5, #0]
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	d030      	beq.n	80044b8 <__sflush_r+0x90>
 8004456:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	0759      	lsls	r1, r3, #29
 800445c:	d505      	bpl.n	800446a <__sflush_r+0x42>
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	1ad2      	subs	r2, r2, r3
 8004462:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004464:	b10b      	cbz	r3, 800446a <__sflush_r+0x42>
 8004466:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	4628      	mov	r0, r5
 800446e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004470:	6a21      	ldr	r1, [r4, #32]
 8004472:	47b0      	blx	r6
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	d106      	bne.n	8004488 <__sflush_r+0x60>
 800447a:	6829      	ldr	r1, [r5, #0]
 800447c:	291d      	cmp	r1, #29
 800447e:	d82b      	bhi.n	80044d8 <__sflush_r+0xb0>
 8004480:	4a28      	ldr	r2, [pc, #160]	@ (8004524 <__sflush_r+0xfc>)
 8004482:	410a      	asrs	r2, r1
 8004484:	07d6      	lsls	r6, r2, #31
 8004486:	d427      	bmi.n	80044d8 <__sflush_r+0xb0>
 8004488:	2200      	movs	r2, #0
 800448a:	6062      	str	r2, [r4, #4]
 800448c:	6922      	ldr	r2, [r4, #16]
 800448e:	04d9      	lsls	r1, r3, #19
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	d504      	bpl.n	800449e <__sflush_r+0x76>
 8004494:	1c42      	adds	r2, r0, #1
 8004496:	d101      	bne.n	800449c <__sflush_r+0x74>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b903      	cbnz	r3, 800449e <__sflush_r+0x76>
 800449c:	6560      	str	r0, [r4, #84]	@ 0x54
 800449e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a0:	602f      	str	r7, [r5, #0]
 80044a2:	b1b9      	cbz	r1, 80044d4 <__sflush_r+0xac>
 80044a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044a8:	4299      	cmp	r1, r3
 80044aa:	d002      	beq.n	80044b2 <__sflush_r+0x8a>
 80044ac:	4628      	mov	r0, r5
 80044ae:	f7ff fbeb 	bl	8003c88 <_free_r>
 80044b2:	2300      	movs	r3, #0
 80044b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80044b6:	e00d      	b.n	80044d4 <__sflush_r+0xac>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b0      	blx	r6
 80044be:	4602      	mov	r2, r0
 80044c0:	1c50      	adds	r0, r2, #1
 80044c2:	d1c9      	bne.n	8004458 <__sflush_r+0x30>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0c6      	beq.n	8004458 <__sflush_r+0x30>
 80044ca:	2b1d      	cmp	r3, #29
 80044cc:	d001      	beq.n	80044d2 <__sflush_r+0xaa>
 80044ce:	2b16      	cmp	r3, #22
 80044d0:	d11d      	bne.n	800450e <__sflush_r+0xe6>
 80044d2:	602f      	str	r7, [r5, #0]
 80044d4:	2000      	movs	r0, #0
 80044d6:	e021      	b.n	800451c <__sflush_r+0xf4>
 80044d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044dc:	b21b      	sxth	r3, r3
 80044de:	e01a      	b.n	8004516 <__sflush_r+0xee>
 80044e0:	690f      	ldr	r7, [r1, #16]
 80044e2:	2f00      	cmp	r7, #0
 80044e4:	d0f6      	beq.n	80044d4 <__sflush_r+0xac>
 80044e6:	0793      	lsls	r3, r2, #30
 80044e8:	bf18      	it	ne
 80044ea:	2300      	movne	r3, #0
 80044ec:	680e      	ldr	r6, [r1, #0]
 80044ee:	bf08      	it	eq
 80044f0:	694b      	ldreq	r3, [r1, #20]
 80044f2:	1bf6      	subs	r6, r6, r7
 80044f4:	600f      	str	r7, [r1, #0]
 80044f6:	608b      	str	r3, [r1, #8]
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	ddeb      	ble.n	80044d4 <__sflush_r+0xac>
 80044fc:	4633      	mov	r3, r6
 80044fe:	463a      	mov	r2, r7
 8004500:	4628      	mov	r0, r5
 8004502:	6a21      	ldr	r1, [r4, #32]
 8004504:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004508:	47e0      	blx	ip
 800450a:	2800      	cmp	r0, #0
 800450c:	dc07      	bgt.n	800451e <__sflush_r+0xf6>
 800450e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451e:	4407      	add	r7, r0
 8004520:	1a36      	subs	r6, r6, r0
 8004522:	e7e9      	b.n	80044f8 <__sflush_r+0xd0>
 8004524:	dfbffffe 	.word	0xdfbffffe

08004528 <_fflush_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	4605      	mov	r5, r0
 800452e:	460c      	mov	r4, r1
 8004530:	b913      	cbnz	r3, 8004538 <_fflush_r+0x10>
 8004532:	2500      	movs	r5, #0
 8004534:	4628      	mov	r0, r5
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	b118      	cbz	r0, 8004542 <_fflush_r+0x1a>
 800453a:	6a03      	ldr	r3, [r0, #32]
 800453c:	b90b      	cbnz	r3, 8004542 <_fflush_r+0x1a>
 800453e:	f7ff f8f5 	bl	800372c <__sinit>
 8004542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f3      	beq.n	8004532 <_fflush_r+0xa>
 800454a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800454c:	07d0      	lsls	r0, r2, #31
 800454e:	d404      	bmi.n	800455a <_fflush_r+0x32>
 8004550:	0599      	lsls	r1, r3, #22
 8004552:	d402      	bmi.n	800455a <_fflush_r+0x32>
 8004554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004556:	f7ff fb94 	bl	8003c82 <__retarget_lock_acquire_recursive>
 800455a:	4628      	mov	r0, r5
 800455c:	4621      	mov	r1, r4
 800455e:	f7ff ff63 	bl	8004428 <__sflush_r>
 8004562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004564:	4605      	mov	r5, r0
 8004566:	07da      	lsls	r2, r3, #31
 8004568:	d4e4      	bmi.n	8004534 <_fflush_r+0xc>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	d4e1      	bmi.n	8004534 <_fflush_r+0xc>
 8004570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004572:	f7ff fb87 	bl	8003c84 <__retarget_lock_release_recursive>
 8004576:	e7dd      	b.n	8004534 <_fflush_r+0xc>

08004578 <__swhatbuf_r>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	460c      	mov	r4, r1
 800457c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004580:	4615      	mov	r5, r2
 8004582:	2900      	cmp	r1, #0
 8004584:	461e      	mov	r6, r3
 8004586:	b096      	sub	sp, #88	@ 0x58
 8004588:	da0c      	bge.n	80045a4 <__swhatbuf_r+0x2c>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	2100      	movs	r1, #0
 800458e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004592:	bf14      	ite	ne
 8004594:	2340      	movne	r3, #64	@ 0x40
 8004596:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800459a:	2000      	movs	r0, #0
 800459c:	6031      	str	r1, [r6, #0]
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	b016      	add	sp, #88	@ 0x58
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	466a      	mov	r2, sp
 80045a6:	f000 f849 	bl	800463c <_fstat_r>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	dbed      	blt.n	800458a <__swhatbuf_r+0x12>
 80045ae:	9901      	ldr	r1, [sp, #4]
 80045b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045b8:	4259      	negs	r1, r3
 80045ba:	4159      	adcs	r1, r3
 80045bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045c0:	e7eb      	b.n	800459a <__swhatbuf_r+0x22>

080045c2 <__smakebuf_r>:
 80045c2:	898b      	ldrh	r3, [r1, #12]
 80045c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c6:	079d      	lsls	r5, r3, #30
 80045c8:	4606      	mov	r6, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	d507      	bpl.n	80045de <__smakebuf_r+0x1c>
 80045ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	2301      	movs	r3, #1
 80045d8:	6163      	str	r3, [r4, #20]
 80045da:	b003      	add	sp, #12
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045de:	466a      	mov	r2, sp
 80045e0:	ab01      	add	r3, sp, #4
 80045e2:	f7ff ffc9 	bl	8004578 <__swhatbuf_r>
 80045e6:	9f00      	ldr	r7, [sp, #0]
 80045e8:	4605      	mov	r5, r0
 80045ea:	4639      	mov	r1, r7
 80045ec:	4630      	mov	r0, r6
 80045ee:	f7ff fbbd 	bl	8003d6c <_malloc_r>
 80045f2:	b948      	cbnz	r0, 8004608 <__smakebuf_r+0x46>
 80045f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f8:	059a      	lsls	r2, r3, #22
 80045fa:	d4ee      	bmi.n	80045da <__smakebuf_r+0x18>
 80045fc:	f023 0303 	bic.w	r3, r3, #3
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	e7e2      	b.n	80045ce <__smakebuf_r+0xc>
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800460e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	9b01      	ldr	r3, [sp, #4]
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	b15b      	cbz	r3, 8004632 <__smakebuf_r+0x70>
 800461a:	4630      	mov	r0, r6
 800461c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004620:	f000 f81e 	bl	8004660 <_isatty_r>
 8004624:	b128      	cbz	r0, 8004632 <__smakebuf_r+0x70>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	431d      	orrs	r5, r3
 8004636:	81a5      	strh	r5, [r4, #12]
 8004638:	e7cf      	b.n	80045da <__smakebuf_r+0x18>
	...

0800463c <_fstat_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	2300      	movs	r3, #0
 8004640:	4d06      	ldr	r5, [pc, #24]	@ (800465c <_fstat_r+0x20>)
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	f7fb ffc7 	bl	80005dc <_fstat>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	d102      	bne.n	8004658 <_fstat_r+0x1c>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	b103      	cbz	r3, 8004658 <_fstat_r+0x1c>
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	bd38      	pop	{r3, r4, r5, pc}
 800465a:	bf00      	nop
 800465c:	200002d0 	.word	0x200002d0

08004660 <_isatty_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	2300      	movs	r3, #0
 8004664:	4d05      	ldr	r5, [pc, #20]	@ (800467c <_isatty_r+0x1c>)
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fb ffc5 	bl	80005fa <_isatty>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_isatty_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_isatty_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	200002d0 	.word	0x200002d0

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	2300      	movs	r3, #0
 8004684:	4d05      	ldr	r5, [pc, #20]	@ (800469c <_sbrk_r+0x1c>)
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fb ffcc 	bl	8000628 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200002d0 	.word	0x200002d0

080046a0 <memchr>:
 80046a0:	4603      	mov	r3, r0
 80046a2:	b510      	push	{r4, lr}
 80046a4:	b2c9      	uxtb	r1, r1
 80046a6:	4402      	add	r2, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	d101      	bne.n	80046b2 <memchr+0x12>
 80046ae:	2000      	movs	r0, #0
 80046b0:	e003      	b.n	80046ba <memchr+0x1a>
 80046b2:	7804      	ldrb	r4, [r0, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	428c      	cmp	r4, r1
 80046b8:	d1f6      	bne.n	80046a8 <memchr+0x8>
 80046ba:	bd10      	pop	{r4, pc}

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
